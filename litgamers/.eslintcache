[{"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\index.js":"1","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\App.js":"2","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Contact.js":"3","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\About.js":"4","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Header.js":"5","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\FiveDollarGames.js":"6","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\FiftyCentGames.js":"7","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Footer.js":"8","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\FiveCentGames.js":"9","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\OneDollarGames.js":"10","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\OneCentGames.js":"11","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\FreeGames.js":"12","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Nav.js":"13","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Home.js":"14","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Sidebar.js":"15","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Dashboard.js":"16","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Login.js":"17","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\utils\\Common.js":"18","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\utils\\PublicRoute.js":"19","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\utils\\PrivateRoute.js":"20","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\RegisterUser.js":"21","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\utils\\PrivateOneCent.js":"22","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\HotSauceComponents\\HotSauce01.js":"23","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\HotSauceComponents\\HotSauce5.js":"24","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\HotSauceComponents\\HotSauce50.js":"25","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\HotSauceComponents\\HotSauce1.js":"26","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\HotSauceComponents\\HotSauce05.js":"27","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\HotSauceComponents\\HotSauceFree.js":"28","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\utils\\PrivateFiveCent.js":"29","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\utils\\PrivateFiftyCent.js":"30","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\utils\\PrivateOneDollar.js":"31","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\utils\\PrivateFiveDollar.js":"32","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\SpaceShooterComponents\\SpaceShooterFree.js":"33","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Balance.js":"34","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\CrazyPongComponents\\CrazyPong01.js":"35","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\CrazyPongComponents\\CrazyPongFree.js":"36","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\CrazyPongComponents\\CrazyPong50.js":"37","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\CrazyPongComponents\\CrazyPong05.js":"38","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\CrazyPongComponents\\CrazyPong1.js":"39","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\CrazyPongComponents\\CrazyPong5.js":"40","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Recovery.js":"41"},{"size":219,"mtime":1608305444700,"results":"42","hashOfConfig":"43"},{"size":4696,"mtime":1622992052864,"results":"44","hashOfConfig":"43"},{"size":3120,"mtime":1613702472897,"results":"45","hashOfConfig":"43"},{"size":2621,"mtime":1611094415771,"results":"46","hashOfConfig":"43"},{"size":244,"mtime":1609791256076,"results":"47","hashOfConfig":"43"},{"size":5053,"mtime":1620936956382,"results":"48","hashOfConfig":"43"},{"size":5032,"mtime":1620936931235,"results":"49","hashOfConfig":"43"},{"size":2104,"mtime":1621606197626,"results":"50","hashOfConfig":"43"},{"size":5032,"mtime":1620936938050,"results":"51","hashOfConfig":"43"},{"size":5097,"mtime":1620936972274,"results":"52","hashOfConfig":"43"},{"size":4983,"mtime":1620937497354,"results":"53","hashOfConfig":"43"},{"size":4616,"mtime":1620934076268,"results":"54","hashOfConfig":"43"},{"size":2839,"mtime":1620932493232,"results":"55","hashOfConfig":"43"},{"size":4521,"mtime":1620934231560,"results":"56","hashOfConfig":"43"},{"size":4691,"mtime":1620932543831,"results":"57","hashOfConfig":"43"},{"size":14666,"mtime":1622998092481,"results":"58","hashOfConfig":"43"},{"size":4428,"mtime":1622993295133,"results":"59","hashOfConfig":"43"},{"size":1965,"mtime":1621534703333,"results":"60","hashOfConfig":"43"},{"size":424,"mtime":1607376113497,"results":"61","hashOfConfig":"43"},{"size":455,"mtime":1607376109713,"results":"62","hashOfConfig":"43"},{"size":4969,"mtime":1622990762252,"results":"63","hashOfConfig":"43"},{"size":481,"mtime":1608740815883,"results":"64","hashOfConfig":"43"},{"size":10014,"mtime":1621530992117,"results":"65","hashOfConfig":"43"},{"size":10329,"mtime":1621531510269,"results":"66","hashOfConfig":"43"},{"size":10050,"mtime":1621531042583,"results":"67","hashOfConfig":"43"},{"size":10045,"mtime":1621530981718,"results":"68","hashOfConfig":"43"},{"size":10037,"mtime":1621531024493,"results":"69","hashOfConfig":"43"},{"size":4098,"mtime":1621469161768,"results":"70","hashOfConfig":"43"},{"size":484,"mtime":1608740795436,"results":"71","hashOfConfig":"43"},{"size":487,"mtime":1608740786498,"results":"72","hashOfConfig":"43"},{"size":487,"mtime":1608740822867,"results":"73","hashOfConfig":"43"},{"size":490,"mtime":1608740804939,"results":"74","hashOfConfig":"43"},{"size":4135,"mtime":1621020877791,"results":"75","hashOfConfig":"43"},{"size":1069,"mtime":1609783670040,"results":"76","hashOfConfig":"77"},{"size":10285,"mtime":1621531138598,"results":"78","hashOfConfig":"43"},{"size":4251,"mtime":1621528109104,"results":"79","hashOfConfig":"43"},{"size":10321,"mtime":1621530942631,"results":"80","hashOfConfig":"43"},{"size":10308,"mtime":1621530911422,"results":"81","hashOfConfig":"43"},{"size":10318,"mtime":1621530924748,"results":"82","hashOfConfig":"43"},{"size":10300,"mtime":1621530917661,"results":"83","hashOfConfig":"43"},{"size":2105,"mtime":1622996024393,"results":"84","hashOfConfig":"43"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},"4blxu0",{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"87"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"87"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"87"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"87"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"87"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"87"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"87"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"87"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"87"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},"lb9h62",{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"87"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"87"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"87"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"87"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"87"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"87"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\index.js",[],["185","186"],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\App.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Contact.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\About.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Header.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\FiveDollarGames.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\FiftyCentGames.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Footer.js",["187"],"import React, { useEffect, useState } from 'react';\r\nimport { Link, useLocation } from \"react-router-dom\";\r\n\r\nconst Footer = () => {\r\n    let location = useLocation();\r\n\r\n    const [activePage, setActivePage] = useState('');\r\n\r\n    useEffect(() => {\r\n        \r\n        switch (location.pathname) {\r\n            case '/':\r\n                setActivePage('home');\r\n            break;\r\n            case '/availablespace':\r\n                setActivePage('availablespace');\r\n            break;\r\n            case '/currenttenants':\r\n                setActivePage('currenttenants');\r\n            break;\r\n            case '/history':\r\n                setActivePage('history');\r\n            break;\r\n            case '/downtown':\r\n                setActivePage('downtown');\r\n            break;\r\n            case '/contact':\r\n                setActivePage('contact');\r\n            break;\r\n            case '/admin':\r\n                setActivePage('admin');\r\n            break;\r\n            default: \r\n                setActivePage('home');\r\n            break;\r\n    }\r\n}, [location.pathname]);\r\n    return (\r\n        <footer>\r\n            <br></br>\r\n            <br></br>\r\n            <div class=\"nav justify-content-center\">\r\n                <Link id=\"navFoot\" onClick={() => setActivePage('home')} className={activePage === 'home' ? 'nav-link active' : 'nav-link'} to=\"/\">Home</Link>\r\n                <Link id=\"navFoot\" onClick={() => setActivePage('about')} className={activePage === 'about' ? 'nav-link active' : 'nav-link'} to=\"/about\">How it Works</Link>\r\n                <Link id=\"navFoot\" onClick={() => setActivePage('contact')} className={activePage === 'contact' ? 'nav-link active' : 'nav-link'} to=\"/contact\">Contact</Link>\r\n            </div>\r\n            <div className=\"footer-content\">\r\n                <p>Copyright � 2020 <b>Fit-To-Tech (FTT) Technologies, LLC</b>&nbsp;&nbsp; All rights reserved.</p>\r\n                Visit the Website <a id=\"navFoot\" href=\"http://fittotech.net\" target=\"_blank\">fittotech.net</a><br></br>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\FiveCentGames.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\OneDollarGames.js",["188"],"import React, { useState, useEffect }from 'react';\r\nimport Sidebar from './Sidebar';\r\nimport {PlayFabClient} from 'playfab-sdk';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst OneDollar = () => {\r\n    const [balance, setBalance] = useState('');\r\n\r\n    useEffect(() => {\r\n        getBalance();\r\n    })\r\n\r\n    const getBalance = async () => {\r\n        if (sessionStorage.getItem(\"balance\")) {\r\n            setBalance(sessionStorage.balance);\r\n            console.log(balance)\r\n        }\r\n        else {\r\n            setBalance(null);\r\n            console.log(balance)\r\n        }\r\n    }\r\n    return (\r\n        <main>\r\n            <header>\r\n                { balance !== null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Balance: ${balance}</span>\r\n                    </div>\r\n                    )\r\n                }\r\n                { balance === null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Not Logged In</span> <br></br>\r\n                        <span className=\"balance1\">Balance: $0</span>\r\n                    </div>\r\n                    )\r\n                }\r\n            </header>\r\n            <div class=\"row\">\r\n                <div>\r\n                    <Sidebar />\r\n                </div>\r\n                <div class=\"col\">\r\n                <h1 className=\"title\">$1 Tournaments</h1>\r\n                <h3 className=\"title\">Tournaments Currently Reset Weekly</h3>\r\n                <h5 className=\"title\"><u>Payouts</u></h5>\r\n                <div class=\"row\" id =\"payouts\">\r\n                    <div class=\"col\">\r\n                        <h7>4 or less player entries</h7>\r\n                        <ul>\r\n                            <li>1st: $1.10 minimum + split pot</li>\r\n                            <li>2nd: $0.40 minimum + split pot</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div class=\"col\">\r\n                        <h7>5 to 9 player entries</h7>\r\n                        <ul>\r\n                            <li>1st: $2.15 minimum + split pot</li>\r\n                            <li>2nd: $1.10 minimum + split pot</li>\r\n                            <li>3rd: $0.50 minimum + split pot</li>\r\n                        </ul>\r\n                    </div>\r\n                        <div class=\"col\">\r\n                            <h7>10 or more player entries</h7>\r\n                            <ul>\r\n                                <li>1st: $2.50 minimum + split pot</li>\r\n                                <li>2nd: $2.00 minimum + split pot</li>\r\n                                <li>3rd: $1.50 minimum + split pot</li>\r\n                                <li>4th: $1.00 minimum + split pot</li>\r\n                                <li>5th: $0.50 minimum + split pot</li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <table class=\"table\" id=\"gamesLarge\">\r\n                        <tbody>\r\n                            <tr>\r\n                            <td>\r\n                                <div id=\"sauce\" className=\"games\">\r\n                                    <Link to=\"/sauceone\"><img src=\"..\\images\\Icon.PNG\" alt=\"play the game\" width=\"150px\"></img>\r\n                                    <h3 className=\"gameLabel\">Hot Sauce Fury</h3></Link>\r\n                                </div>\r\n                            </td>\r\n                            <td>\r\n                                <div id=\"sauce\" className=\"games\">\r\n                                    <Link to=\"/pongone\"><img src=\"..\\images\\pong_icon.PNG\" alt=\"play the game\" width=\"150px\"></img>\r\n                                    <h3 className=\"gameLabel\">Crazy Pong</h3></Link>\r\n                                </div>\r\n                            </td>\r\n                            </tr>\r\n                            <tr>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <table class=\"table\" id=\"gamesSmall\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <div id=\"sauce\" className=\"games\">\r\n                                    <Link to=\"/sauceone\"><img src=\"..\\images\\Icon.PNG\" alt=\"play the game\" width=\"150px\"></img>\r\n                                    <h3 className=\"gameLabel\">Hot Sauce Fury</h3></Link>\r\n                                </div>\r\n                                <br></br>\r\n                            </tr>\r\n                            <tr>\r\n                                <div id=\"pong\" className=\"games\">\r\n                                    <Link to=\"/pongone\"><img src=\"..\\images\\pong_icon.PNG\" alt=\"play the game\" width=\"150px\"></img>\r\n                                    <h3 className=\"gameLabel\">Crazy Pong</h3></Link>\r\n                                </div>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default OneDollar;","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\OneCentGames.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\FreeGames.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Nav.js",[],["189","190"],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Home.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Sidebar.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Dashboard.js",["191","192"],"import React, { useState, useEffect } from 'react';\r\nimport { getUser, removeUserSession } from '../utils/Common';\r\nimport {PlayFabClient} from 'playfab-sdk';\r\nimport emailjs from 'emailjs-com';\r\n\r\nfunction Dashboard(props) {\r\n    const [balance, setBalance] = useState('');\r\n    const [username, setUsername] = useState('');\r\n    const user = useFormInput('');\r\n    const [error, setError] = useState(null);\r\n    const [success, setSuccess] = useState(null);\r\n    var orderId;\r\n    var confirmURL;\r\n    var addCurrency;\r\n\r\n    useEffect(() => {\r\n        getBalance();\r\n        getUserName();\r\n    })\r\n\r\n    const getBalance = () => {\r\n        var userBalance = {\r\n        }\r\n        PlayFabClient.GetUserInventory(userBalance, function (error, result) {\r\n            if (result != null){\r\n                var currentBalance = result.data.VirtualCurrency.US\r\n                setBalance((currentBalance / 100).toFixed(2))\r\n                sessionStorage.setItem(\"balance\", balance);\r\n            }\r\n            else if (result == null){\r\n                setBalance(<medium style={{ color: 'red' }}>error retrieving balance</medium>)\r\n            }\r\n            }\r\n        )\r\n    }\r\n    const zeroBalance = () => {\r\n        var removeBalance = {\r\n            Amount: Number(balance * 100),\r\n            VirtualCurrency: \"US\"\r\n        }\r\n        PlayFabClient.SubtractUserVirtualCurrency(removeBalance, async function (error, result) {\r\n            await new Promise(resolve => setTimeout(resolve, 500));\r\n            if (result != null){\r\n                // console.log(result)\r\n                alert(\"You will recieve your payment shortly!\")\r\n                window.location.reload();\r\n            }\r\n            else if (result == null){\r\n                alert(\"Something went wrong, please try again\");\r\n                // window.location.reload();\r\n            }\r\n            }\r\n        )\r\n    }\r\n\r\n    const depositTen = async () => {\r\n        addCurrency = ({\r\n            Amount: 1000,\r\n            VirtualCurrency: \"US\"\r\n        })\r\n        var initiatePurchase = {\r\n            Items: [{\r\n                    ItemId: \"CurrencyBundle(10)\",\r\n                    quantity: 1,\r\n                    Annotation: \"Purchased from Dashboard\"\r\n                }]\r\n            }\r\n        PlayFabClient.StartPurchase(initiatePurchase, function (error, result) {\r\n            orderId = result.data.OrderId;\r\n            console.log(result)\r\n            if (result == null){\r\n                console.log(error)\r\n                alert(\"Something went wrong, please try again\")\r\n            }})\r\n        handlePayment();\r\n    }\r\n    const depositFifteen = async () => {\r\n        addCurrency = ({\r\n            Amount: 1500,\r\n            VirtualCurrency: \"US\"\r\n        })\r\n        var initiatePurchase = {\r\n            Items: [{\r\n                    ItemId: \"CurrencyBundle(15)\",\r\n                    quantity: 1,\r\n                    Annotation: \"Purchased from Dashboard\"\r\n                }]\r\n            }\r\n        PlayFabClient.StartPurchase(initiatePurchase, function (error, result) {\r\n            orderId = result.data.OrderId;\r\n            console.log(result)\r\n            if (result == null){\r\n                alert(\"Something went wrong, please try again\")\r\n            }})\r\n        handlePayment();\r\n    }\r\n    const depositTwenty = async () => {\r\n        addCurrency = ({\r\n            Amount: 2000,\r\n            VirtualCurrency: \"US\"\r\n        })\r\n        var initiatePurchase = {\r\n            Items: [{\r\n                    ItemId: \"CurrencyBundle(20)\",\r\n                    quantity: 1,\r\n                    Annotation: \"Purchased from Dashboard\"\r\n                }]\r\n            }\r\n        PlayFabClient.StartPurchase(initiatePurchase, function (error, result) {\r\n            orderId = result.data.OrderId;\r\n            console.log(result)\r\n            if (result == null){\r\n                alert(\"Something went wrong, please try again\")\r\n            }})\r\n        handlePayment();\r\n    }\r\n    const depositTwentyFive = async () => {\r\n        addCurrency = ({\r\n            Amount: 2500,\r\n            VirtualCurrency: \"US\"\r\n        })\r\n        var initiatePurchase = {\r\n            Items: [{\r\n                    ItemId: \"CurrencyBundle(25)\",\r\n                    quantity: 1,\r\n                    Annotation: \"Purchased from Dashboard\"\r\n                }]\r\n            }\r\n        PlayFabClient.StartPurchase(initiatePurchase, function (error, result) {\r\n            orderId = result.data.OrderId;\r\n            console.log(result)\r\n            if (result == null){\r\n                alert(\"Something went wrong, please try again\")\r\n            }})\r\n        handlePayment();\r\n    }\r\n    const depositFifty = async () => {\r\n        addCurrency = ({\r\n            Amount: 5000,\r\n            VirtualCurrency: \"US\"\r\n        })\r\n        var initiatePurchase = {\r\n            Items: [{\r\n                    ItemId: \"CurrencyBundle(50)\",\r\n                    quantity: 1,\r\n                    Annotation: \"Purchased from Dashboard\"\r\n                }]\r\n            }\r\n        PlayFabClient.StartPurchase(initiatePurchase, function (error, result) {\r\n            orderId = result.data.OrderId;\r\n            console.log(result)\r\n            if (result == null){\r\n                alert(\"Something went wrong, please try again\")\r\n            }})\r\n        handlePayment();\r\n    }\r\n    const depositSeventyFive = async () => {\r\n        addCurrency = ({\r\n            Amount: 7500,\r\n            VirtualCurrency: \"US\"\r\n        })\r\n        var initiatePurchase = {\r\n            Items: [{\r\n                    ItemId: \"CurrencyBundle(75)\",\r\n                    quantity: 1,\r\n                    Annotation: \"Purchased from Dashboard\"\r\n                }]\r\n            }\r\n        PlayFabClient.StartPurchase(initiatePurchase, function (error, result) {\r\n            orderId = result.data.OrderId;\r\n            console.log(result)\r\n            if (result == null){\r\n                alert(\"Something went wrong, please try again\")\r\n            }})\r\n        handlePayment();\r\n    }\r\n    const depositHundred= async () => {\r\n        addCurrency = ({\r\n            Amount: 10000,\r\n            VirtualCurrency: \"US\"\r\n        })\r\n        var initiatePurchase = {\r\n            Items: [{\r\n                    ItemId: \"CurrencyBundle(100)\",\r\n                    quantity: 1,\r\n                    Annotation: \"Purchased from Dashboard\"\r\n                }]\r\n            }\r\n        PlayFabClient.StartPurchase(initiatePurchase, function (error, result) {\r\n            orderId = result.data.OrderId;\r\n            console.log(result)\r\n            if (result == null){\r\n                alert(\"Something went wrong, please try again\")\r\n            }})\r\n        handlePayment();\r\n    }\r\n\r\n    const handlePayment = async () => {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        var payPurchase = ({\r\n            OrderId: orderId,\r\n            ProviderName: \"PayPal\",\r\n            Currency: \"RM\"\r\n        });\r\n        console.log(payPurchase)\r\n        PlayFabClient.PayForPurchase(payPurchase, function (error, result) {\r\n                if (result != null) {\r\n                    confirmURL = result.data.PurchaseConfirmationPageURL\r\n                    window.open(confirmURL, \"width=300\", \"height=200\")\r\n                    console.log(result)\r\n                }\r\n                else if (result == null){\r\n                    console.log(error)\r\n                    alert(\"Something went wrong\")\r\n                }\r\n        })\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        var confirmPurchase = ({\r\n            OrderId: orderId\r\n        });\r\n        console.log(confirmPurchase)\r\n        window.confirm(\"Select Ok once you have made your purchase to confirm\")\r\n        PlayFabClient.ConfirmPurchase(confirmPurchase, function (error, result) {\r\n            console.log(result)\r\n            console.log(error)\r\n            if (result == null) {\r\n                alert(\"The purchase was not confirmed, if this is in error please contact us\")\r\n            }\r\n            else if (result != null){\r\n                alert(\"Your purchase was confirmed! Good Luck!\")\r\n            }\r\n        })\r\n    }\r\n    const getUserName = () => {\r\n        // setUsername((sessionStorage.getItem(\"user\")).replace(/['\"]+/g, ''));\r\n        var displayName = {\r\n            ShowDisplayName: \"true\"\r\n        }\r\n        PlayFabClient.GetPlayerProfile(displayName, function (error, result) {\r\n            if (result != null){\r\n                setUsername(result.data.PlayerProfile.DisplayName)\r\n            }\r\n            else if (result == null){\r\n                setUsername(\"Error Getting Name\")\r\n            }\r\n            }\r\n        )\r\n    }\r\n    const changeEmail = () => {\r\n        var email = user.value;\r\n        var emailChange = ({\r\n            EmailAddress: email\r\n        });\r\n        PlayFabClient.AddOrUpdateContactEmail(emailChange, function (error, result) {\r\n                if (result != null) {\r\n                    console.log(result)\r\n                    setSuccess(\"Contact Email Successfully Changed\")\r\n                    console.log(error)\r\n                }\r\n                else if (result == null){\r\n                    console.log(error)\r\n                    setError(\"Something went wrong, email not changed\")\r\n                    console.log(error)\r\n                }\r\n        })\r\n    }\r\n\r\n    const handleWithdrawal = (e) => {\r\n        e.preventDefault();\r\n    \r\n        emailjs.sendForm('service_s2e1vlm', 'template_nc6k0qa', e.target, 'user_F50HIjhG7V6zUkMAsw8UL')\r\n            .then((result) => {\r\n                console.log(result.text);\r\n                zeroBalance();\r\n            }, (error) => {\r\n                console.log(error.text);\r\n            });\r\n        }\r\n    // handle click event of logout button\r\n    const handleLogout = () => {\r\n        removeUserSession();\r\n        props.history.push('/login');\r\n    }\r\n    \r\n    \r\n    return (\r\n        <main>\r\n            <header>\r\n                { balance !== null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Balance: ${balance}</span>\r\n                    </div>\r\n                    )\r\n                }\r\n                { balance === null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Not Logged In</span> <br></br>\r\n                        <span className=\"balance1\">Balance: $0</span>\r\n                    </div>\r\n                    )\r\n                }\r\n            </header>\r\n            <div className=\"dashboard\">\r\n                <h2 id=\"dashTitle\" className=\"jumbotron p-4 p-md-2 text-white rounded bg-dark text-center\">Welcome to your Dashboard!</h2>\r\n            <div className=\"dashForm\">\r\n            <h4>Welcome {username}!!</h4><br></br>\r\n            <h4>Your Current Balance is ${balance}</h4><br></br><br></br>\r\n            <h5 className=\"dashUnder\">Add Additional Funds To Your Account Using PayPal</h5><br></br>\r\n            <div className=\"paymentBTN\">\r\n                <input className=\"depositBTN\" type=\"button\" onClick={depositTen} value=\"$10\" />\r\n            </div>\r\n            <div className=\"paymentBTN\">\r\n                <input className=\"depositBTN\" type=\"button\" onClick={depositFifteen} value=\"$15\" />\r\n            </div>\r\n            <div className=\"paymentBTN\">\r\n                <input className=\"depositBTN\" type=\"button\" onClick={depositTwenty} value=\"$20\" />\r\n            </div>\r\n            <div className=\"paymentBTN\">\r\n                <input className=\"depositBTN\" type=\"button\" onClick={depositTwentyFive} value=\"$25\" />\r\n            </div>\r\n            <div className=\"paymentBTN\">\r\n                <input className=\"depositBTN\" type=\"button\" onClick={depositFifty} value=\"$50\" />\r\n            </div>\r\n            <div className=\"paymentBTN\">\r\n                <input className=\"depositBTN\" type=\"button\" onClick={depositSeventyFive} value=\"$75\" />\r\n            </div>\r\n            <div className=\"paymentBTN\">\r\n                <input className=\"depositBTN\" type=\"button\" onClick={depositHundred} value=\"$100\" />\r\n            </div>\r\n            <br></br>\r\n            <br></br>\r\n            <h5 className=\"dashUnder\">Withdraw Funds Using Your PayPal Email</h5><br></br>\r\n            <form className=\"withdraw-form\" onSubmit={handleWithdrawal}>\r\n                        <div className=\"form-group\">\r\n                            <input type=\"hidden\" name=\"contact_number\" />\r\n                            <input type=\"hidden\" name=\"from_name\" placeholder=\"Name\" value={username}/>\r\n                        </div>\r\n                        <label>Enter the email connected to your paypal account:</label>\r\n                        <div className=\"form-group\">\r\n                            <input type=\"email\" name=\"from_email\" placeholder=\"Email\"  required/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input type=\"hidden\" name=\"subject\" placeholder=\"Subject\" value=\"Withdraw Request\"/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input type=\"hidden\" name=\"html_message\" placeholder=\"Message\" value={balance}/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input type=\"submit\" value=\"Request a Payment with Paypal\" />\r\n                        </div>\r\n                    </form>\r\n                <br></br>\r\n                <br></br>\r\n                <div>\r\n                    Change Contact Email Address Associated with Account &#40;This will not change the login email address, please contact us to change the login&#41; <br />\r\n                    <span className=\"emailChange\"><input id=\"emailChange\" type=\"email\" {...user}/></span>\r\n                    <input type=\"button\" onClick={changeEmail} value=\"Submit\" />\r\n                    {error && <><small style={{ color: 'red' }}>{error}</small><br /></>}\r\n                    {success && <><small style={{ color: 'yellow' }}>{success}</small><br /></>}\r\n                </div>\r\n                <br></br>\r\n                <br></br>\r\n                <input type=\"button\" onClick={handleLogout} value=\"Logout\" />\r\n            </div>\r\n            </div>\r\n        </main>\r\n    );\r\n}\r\nconst useFormInput = initialValue => {\r\n    const [value, setValue] = useState(initialValue);\r\n    \r\n    const handleChange = e => {\r\n        setValue(e.target.value);\r\n    }\r\n    return {\r\n        value,\r\n        onChange: handleChange\r\n    }\r\n}\r\n\r\nexport default Dashboard;","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Login.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\utils\\Common.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\utils\\PublicRoute.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\utils\\PrivateRoute.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\RegisterUser.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\utils\\PrivateOneCent.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\HotSauceComponents\\HotSauce01.js",["193","194","195"],"import React, { useState, useEffect} from \"react\";\r\nimport '../../utils/TemplateData/style.css'\r\nimport Unity, { UnityContext } from \"react-unity-webgl\";\r\nimport {PlayFabClient} from 'playfab-sdk';\r\n\r\nlet unityContext = new UnityContext({\r\n  codeUrl: \"/games/HotSauce/Build/HotSauce Fury Web.wasm.unityweb\",\r\n  loaderUrl: \"/games/HotSauce/Build/HotSauce Fury Web.loader.js\",\r\n  frameworkUrl: \"/games/HotSauce/Build/HotSauce Fury Web.framework.js.unityweb\",\r\n  dataUrl: \"/games/HotSauce/Build/HotSauce Fury Web.data.unityweb\",\r\n});\r\n\r\nexport default function HotSauce01(props) {\r\n  const [progression, setProgression] = useState(0);\r\n  const [leaders, setLeaderboard] = useState([]);\r\n  const [balance1, setBalance] = useState('');\r\n  useEffect(()=>{\r\n    getBalance();\r\n    getLeaderboard()\r\n    launchGame();\r\n    }, [])\r\n\r\n  unityContext.on(\"progress\", progressionVal => {\r\n    setProgression(progressionVal * 100);\r\n    console.log(progression);\r\n    });\r\n  unityContext.on('loaded', () => {\r\n    console.log('Done Loading!');\r\n  });\r\n  unityContext.on('receiveMessageFromUnity',  async function receiveMessageFromUnity(txt) {\r\n    // Get element to assign the message\r\n    const finalScore = txt;\r\n    console.log(\"final\" + \" \" + finalScore)\r\n  \r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    var statisticsUpdate = \r\n      {\r\n          PlayFabId: \"1DF75\",\r\n          Statistics:[\r\n          {\r\n            StatisticName: \"HotSauceDaily\",\r\n            Value: finalScore\r\n          }\r\n        ]\r\n      }\r\n      PlayFabClient.UpdatePlayerStatistics(statisticsUpdate, function (error, result)\r\n      {\r\n        if (result != null){\r\n          alert(\"Your Final Score is: \" + finalScore + \"!\")\r\n          alert(\"Play again to improve your score or play another game! Scores will be reset on Sunday night after 12 PM EST.\")\r\n          props.history.push('/onecent');\r\n          console.log(\"Leaderboard Updated!\")}\r\n          else if (result == null) {\r\n            alert(\"Something went wrong sending the leaderboard, please contact us\")\r\n            props.history.push('/onecent');\r\n          }\r\n        })\r\n      }\r\n    );\r\n\r\n  const onFullScreen = () => {\r\n    unityContext.setFullscreen(true);\r\n    };\r\n    var balance;\r\n\r\n    const getBalance = async () => {\r\n      balance = sessionStorage.balance;\r\n      setBalance(balance)\r\n    }\r\n    \r\n    const launchGame = async () => {\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n        if (balance <= .01 ){\r\n            alert(\"Your account is inneficient, please deposit additional funds\")\r\n            props.history.push('/onecent');\r\n        }\r\n        else {\r\n          verifyPayment();\r\n        }\r\n      }\r\n      \r\n      const verifyPayment = async () => {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        if (window.confirm(\"Please confirm 1¢ charge to your account to enter this tournament! You will be charged upon clicking Ok.\") == false)\r\n        {\r\n          props.history.push('/onecent');\r\n        }\r\n        else {\r\n          alert(\"Do not refresh or navigate to another page until your score has been sent to the leaderboard at the end of the game, good luck!.\")\r\n          var subtractCurrency = {\r\n            Amount: 1,\r\n            VirtualCurrency: \"US\"\r\n          }\r\n          PlayFabClient.SubtractUserVirtualCurrency(subtractCurrency, function (error, result){\r\n            if (result != null) {\r\n              sessionStorage.setItem(\"balance\", (balance - .01).toFixed(2));\r\n              getBalance();\r\n            }\r\n            else {\r\n              alert(\"There was an error charging your account\")\r\n              props.history.push('/onecent');\r\n            }\r\n          })\r\n        }\r\n      }\r\n\r\n      async function getLeaderboard(){\r\n        await new Promise(resolve => setTimeout(resolve, 1500));\r\n        var leaderboard = {\r\n                StartPosition: 0,\r\n                StatisticName: \"HotSauceDaily\",\r\n                MaxResultsCount: 50\r\n            };\r\n        PlayFabClient.GetLeaderboard(leaderboard, function (error, result)\r\n                {\r\n                    setLeaderboard(result.data.Leaderboard);\r\n                    console.log(leaders)\r\n                });\r\n            }\r\n    \r\n      return (\r\n        <main>\r\n            <header>\r\n                { balance !== null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Balance: ${balance1}</span>\r\n                    </div>\r\n                    )\r\n                }\r\n                { balance === null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Not Logged In</span> <br></br>\r\n                        <span className=\"balance1\">Balance: $0</span>\r\n                    </div>\r\n                    )\r\n                }\r\n            </header>\r\n            {/iPhone|iPad|iPod|Android/i.test(navigator.userAgent) ? (\r\n            <div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h1 className=\"title\">Hot Sauce Fury!</h1>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <div className=\"col-12\">\r\n                <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n            <div id=\"unity-container\" class=\"unity-desktop\">\r\n            <Unity unityContext={unityContext} width=\"100%\" height=\"100%\"/>\r\n                <div id=\"unity-loading-bar\">\r\n                    <div id=\"unity-logo\"></div>\r\n                    <div id=\"unity-progress-bar-empty\">\r\n                    <div id=\"unity-progress-bar-full\"></div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"unity-footer\">\r\n                    <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"controls\">\r\n                <h4><u>Controls</u></h4>\r\n                      <ol>On PC use the left and right arrows to dodge the hot sauce and collect the food and snacks.</ol>\r\n                      <ol>The mouse can also be used by clicking on either side of the character to move in the corresponding direction.</ol>\r\n                      <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                      <ol>On mobile touch the screen to the right of the character to move to the right and left to move left.</ol>\r\n                    <h4><u>Scoring</u></h4>\r\n                      <ol>Chocolate = 100 points</ol>\r\n                      <ol>Food = Random points between 7 and 12</ol>\r\n                      <ol>Hot Sauce = -1 life</ol>\r\n                </div>\r\n            </div>\r\n            </div> \r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h2 className=\"title\">Leaderboard</h2>\r\n                    <ol className=\"leaderboardList\">\r\n                        {leaders.map((leaderMapped, index) => (\r\n                            <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                        ))}\r\n                    </ol>\r\n                </div>\r\n              </div>\r\n            </div>)\r\n            :\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <h2 className=\"title\">Leaderboard</h2>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                        <h1 className=\"title\">Hot Sauce Fury!</h1>\r\n                    </div>\r\n                    <div className=\"col-3\"></div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <ol className=\"leaderboardList\">\r\n                            {leaders.map((leaderMapped, index) => (\r\n                                <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                            ))}\r\n                        </ol>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                    <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n                <div id=\"unity-container\" class=\"unity-desktop\">\r\n                <Unity unityContext={unityContext} width=\"960px\" height=\"600px\"/>\r\n                    <div id=\"unity-loading-bar\">\r\n                        <div id=\"unity-logo\"></div>\r\n                        <div id=\"unity-progress-bar-empty\">\r\n                        <div id=\"unity-progress-bar-full\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"unity-footer\">\r\n                        <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                    </div>\r\n                    <br></br>\r\n                    <h4><u>Controls</u></h4>\r\n                      <ol>On PC use the left and right arrows to dodge the hot sauce and collect the food and snacks.</ol>\r\n                      <ol>The mouse can also be used by clicking on either side of the character to move in the corresponding direction.</ol>\r\n                      <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                      <ol>On mobile touch the screen to the right of the character to move to the right and left to move left.</ol>\r\n                    <h4><u>Scoring</u></h4>\r\n                      <ol>Chocolate = 100 points</ol>\r\n                      <ol>Food = Random points between 7 and 12</ol>\r\n                      <ol>Hot Sauce = -1 life</ol>\r\n                  </div>\r\n                </div>\r\n                </div>\r\n                <div className=\"col-3\"></div>\r\n                </div>\r\n              }\r\n        </main>\r\n    ) ;\r\n}","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\HotSauceComponents\\HotSauce5.js",["196","197","198"],"import React, { useState, useEffect} from \"react\";\r\nimport '../../utils/TemplateData/style.css'\r\nimport Unity, { UnityContext } from \"react-unity-webgl\";\r\nimport {PlayFabClient} from 'playfab-sdk';\r\n\r\nlet unityContext = new UnityContext({\r\n  codeUrl: \"/games/HotSauce/Build/HotSauce Fury Web.wasm.unityweb\",\r\n  loaderUrl: \"/games/HotSauce/Build/HotSauce Fury Web.loader.js\",\r\n  frameworkUrl: \"/games/HotSauce/Build/HotSauce Fury Web.framework.js.unityweb\",\r\n  dataUrl: \"/games/HotSauce/Build/HotSauce Fury Web.data.unityweb\",\r\n});\r\n\r\nexport default function HotSauce5(props) {\r\n  const [progression, setProgression] = useState(0);\r\n  const [leaders, setLeaderboard] = useState([]);\r\n  const [balance1, setBalance] = useState('');\r\n  useEffect(()=>{\r\n    getBalance();\r\n    getLeaderboard()\r\n    launchGame();\r\n    }, [])\r\n\r\n  unityContext.on(\"progress\", progressionVal => {\r\n    setProgression(progressionVal * 100);\r\n    console.log(progression);\r\n    });\r\n  unityContext.on('loaded', () => {\r\n    console.log('Done Loading!');\r\n  });\r\n  unityContext.on('receiveMessageFromUnity',  async function receiveMessageFromUnity(txt) {\r\n    // Get element to assign the message\r\n    const finalScore = txt;\r\n    console.log(\"final\" + \" \" + finalScore)\r\n  \r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    var statisticsUpdate = \r\n      {\r\n          PlayFabId: \"1DF75\",\r\n          Statistics:[\r\n          {\r\n            StatisticName: \"HotSauceDaily5\",\r\n            Value: finalScore\r\n          }\r\n        ]\r\n      }\r\n      PlayFabClient.UpdatePlayerStatistics(statisticsUpdate, function (error, result)\r\n      {\r\n        if (result != null){\r\n          var subtractCurrency = {\r\n            Amount: 500,\r\n            VirtualCurrency: \"US\"\r\n          }\r\n          PlayFabClient.SubtractUserVirtualCurrency(subtractCurrency, function (error, result){\r\n            sessionStorage.setItem(\"balance\", (balance1 - 5).toFixed(2));\r\n          })\r\n          console.log(\"Leaderboard Updated!\")}\r\n          else if (result == null) {\r\n            alert(\"Something went wrong sending the leaderboard, please contact us\")\r\n          }\r\n        })\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n        alert(\"Your Final Score is: \" + finalScore + \"!\")\r\n        alert(\"Play again to improve your score or play another game! Scores will be reset Sunday night after 12 PM EST.\")\r\n        props.history.push('/fivedollar');\r\n    }\r\n  );\r\n\r\n  const onFullScreen = () => {\r\n    unityContext.setFullscreen(true);\r\n    };\r\n    var balance;\r\n\r\n    const getBalance = async () => {\r\n        balance = sessionStorage.balance;\r\n        setBalance(balance)\r\n    }\r\n    \r\n    const launchGame = async () => {\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n        if (balance <= 5 ){\r\n            alert(\"Your account is inneficient, please deposit additional funds\")\r\n            props.history.push('/fivedollar');\r\n        }\r\n        else {\r\n          verifyPayment();\r\n        }\r\n      }\r\n      \r\n      const verifyPayment = async () => {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        if (window.confirm(\"Please confirm $5 charge to your account to enter this tournament! You will be charged upon clicking Ok.\") == false)\r\n        {\r\n          props.history.push('/fivedollar');\r\n        }\r\n        else {\r\n          alert(\"Do not refresh or navigate to another page until your score has been sent to the leaderboard at the end of the game, good luck!.\")\r\n          var subtractCurrency = {\r\n            Amount: 500,\r\n            VirtualCurrency: \"US\"\r\n          }\r\n          PlayFabClient.SubtractUserVirtualCurrency(subtractCurrency, function (error, result){\r\n            if (result != null) {\r\n              sessionStorage.setItem(\"balance\", (balance - 5).toFixed(2));\r\n              getBalance();\r\n            }\r\n            else {\r\n              alert(\"There was an error charging your account\")\r\n              props.history.push('/fivedollar');\r\n            }\r\n          })\r\n        }\r\n      }\r\n\r\n      async function getLeaderboard(){\r\n        await new Promise(resolve => setTimeout(resolve, 1500));\r\n        var leaderboard = {\r\n                StartPosition: 0,\r\n                StatisticName: \"HotSauceDaily5\",\r\n                MaxResultsCount: 50\r\n            };\r\n        PlayFabClient.GetLeaderboard(leaderboard, function (error, result)\r\n                {\r\n                    setLeaderboard(result.data.Leaderboard);\r\n                    console.log(leaders)\r\n                });\r\n            }\r\n    \r\n    return (\r\n        <main>\r\n            <header>\r\n                { balance !== null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Balance: ${balance1}</span>\r\n                    </div>\r\n                    )\r\n                }\r\n                { balance === null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Not Logged In</span> <br></br>\r\n                        <span className=\"balance1\">Balance: $0</span>\r\n                    </div>\r\n                    )\r\n                }\r\n            </header>\r\n            {/iPhone|iPad|iPod|Android/i.test(navigator.userAgent) ? (\r\n            <div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h1 className=\"title\">Hot Sauce Fury!</h1>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <div className=\"col-12\">\r\n                <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n            <div id=\"unity-container\" class=\"unity-desktop\">\r\n            <Unity unityContext={unityContext} width=\"100%\" height=\"100%\"/>\r\n                <div id=\"unity-loading-bar\">\r\n                    <div id=\"unity-logo\"></div>\r\n                    <div id=\"unity-progress-bar-empty\">\r\n                    <div id=\"unity-progress-bar-full\"></div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"unity-footer\">\r\n                    <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"controls\">\r\n                <h4><u>Controls</u></h4>\r\n                      <ol>On PC use the left and right arrows to dodge the hot sauce and collect the food and snacks.</ol>\r\n                      <ol>The mouse can also be used by clicking on either side of the character to move in the corresponding direction.</ol>\r\n                      <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                      <ol>On mobile touch the screen to the right of the character to move to the right and left to move left.</ol>\r\n                    <h4><u>Scoring</u></h4>\r\n                      <ol>Chocolate = 100 points</ol>\r\n                      <ol>Food = Random points between 7 and 12</ol>\r\n                      <ol>Hot Sauce = -1 life</ol>\r\n                </div>\r\n            </div>\r\n            </div> \r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h2 className=\"title\">Leaderboard</h2>\r\n                    <ol className=\"leaderboardList\">\r\n                        {leaders.map((leaderMapped, index) => (\r\n                            <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                        ))}\r\n                    </ol>\r\n                </div>\r\n              </div>\r\n            </div>)\r\n            :\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <h2 className=\"title\">Leaderboard</h2>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                        <h1 className=\"title\">Hot Sauce Fury!</h1>\r\n                    </div>\r\n                    <div className=\"col-3\"></div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <ol className=\"leaderboardList\">\r\n                            {leaders.map((leaderMapped, index) => (\r\n                                <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                            ))}\r\n                        </ol>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                    <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n                <div id=\"unity-container\" class=\"unity-desktop\">\r\n                <Unity unityContext={unityContext} width=\"960px\" height=\"600px\"/>\r\n                    <div id=\"unity-loading-bar\">\r\n                        <div id=\"unity-logo\"></div>\r\n                        <div id=\"unity-progress-bar-empty\">\r\n                        <div id=\"unity-progress-bar-full\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"unity-footer\">\r\n                        <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                    </div>\r\n                    <br></br>\r\n                    <h4><u>Controls</u></h4>\r\n                      <ol>On PC use the left and right arrows to dodge the hot sauce and collect the food and snacks.</ol>\r\n                      <ol>The mouse can also be used by clicking on either side of the character to move in the corresponding direction.</ol>\r\n                      <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                      <ol>On mobile touch the screen to the right of the character to move to the right and left to move left.</ol>\r\n                    <h4><u>Scoring</u></h4>\r\n                      <ol>Chocolate = 100 points</ol>\r\n                      <ol>Food = Random points between 7 and 12</ol>\r\n                      <ol>Hot Sauce = -1 life</ol>\r\n                  </div>\r\n                </div>\r\n                </div>\r\n                <div className=\"col-3\"></div>\r\n                </div>\r\n              }\r\n        </main>\r\n    ) ;\r\n}","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\HotSauceComponents\\HotSauce50.js",["199","200","201"],"import React, { useState, useEffect} from \"react\";\r\nimport '../../utils/TemplateData/style.css'\r\nimport Unity, { UnityContext } from \"react-unity-webgl\";\r\nimport {PlayFabClient} from 'playfab-sdk';\r\n\r\nlet unityContext = new UnityContext({\r\n  codeUrl: \"/games/HotSauce/Build/HotSauce Fury Web.wasm.unityweb\",\r\n  loaderUrl: \"/games/HotSauce/Build/HotSauce Fury Web.loader.js\",\r\n  frameworkUrl: \"/games/HotSauce/Build/HotSauce Fury Web.framework.js.unityweb\",\r\n  dataUrl: \"/games/HotSauce/Build/HotSauce Fury Web.data.unityweb\",\r\n});\r\n\r\nexport default function HotSauce50(props) {\r\n    const [progression, setProgression] = useState(0);\r\n    const [leaders, setLeaderboard] = useState([]);\r\n    const [balance1, setBalance] = useState('');\r\n    useEffect(()=>{\r\n        getBalance();\r\n        getLeaderboard()\r\n        launchGame();\r\n    }, [])\r\n\r\n  unityContext.on(\"progress\", progressionVal => {\r\n    setProgression(progressionVal * 100);\r\n    console.log(progression);\r\n    });\r\n  unityContext.on('loaded', () => {\r\n    console.log('Done Loading!');\r\n  });\r\n  unityContext.on('receiveMessageFromUnity',  async function receiveMessageFromUnity(txt) {\r\n    // Get element to assign the message\r\n    const finalScore = txt;\r\n    console.log(\"final\" + \" \" + finalScore)\r\n  \r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    var statisticsUpdate = \r\n      {\r\n          PlayFabId: \"1DF75\",\r\n          Statistics:[\r\n          {\r\n            StatisticName: \"HotSauceDaily.50\",\r\n            Value: finalScore\r\n          }\r\n        ]\r\n      }\r\n      PlayFabClient.UpdatePlayerStatistics(statisticsUpdate, function (error, result)\r\n      {\r\n        if (result != null){\r\n          alert(\"Your Final Score is: \" + finalScore + \"!\")\r\n          alert(\"Play again to improve your score or play another game! Scores will be reset on Sunday night after 12 PM EST.\")\r\n          props.history.push('/fiftycent');\r\n          console.log(\"Leaderboard Updated!\")}\r\n          else if (result == null) {\r\n            alert(\"Something went wrong sending the leaderboard, please contact us\")\r\n            props.history.push('/fiftycent');\r\n          }\r\n        })\r\n      }\r\n    );\r\n\r\n  const onFullScreen = () => {\r\n    unityContext.setFullscreen(true);\r\n    };\r\n    var balance;\r\n\r\n    const getBalance = async () => {\r\n      balance = sessionStorage.balance;\r\n      setBalance(balance)\r\n    }\r\n    \r\n    const launchGame = async () => {\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n        if (balance <= .50 ){\r\n            alert(\"Your account is inneficient, please deposit additional funds\")\r\n            props.history.push('/fiftycent');\r\n        }\r\n        else {\r\n          verifyPayment();\r\n        }\r\n      }\r\n      \r\n      const verifyPayment = async () => {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        if (window.confirm(\"Please confirm 50¢ charge to your account to enter this tournament! You will be charged upon clicking Ok.\") == false)\r\n        {\r\n          props.history.push('/fiftycent');\r\n        }\r\n        else {\r\n          alert(\"Do not refresh or navigate to another page until your score has been sent to the leaderboard at the end of the game, good luck!.\")\r\n          var subtractCurrency = {\r\n            Amount: 50,\r\n            VirtualCurrency: \"US\"\r\n          }\r\n          PlayFabClient.SubtractUserVirtualCurrency(subtractCurrency, function (error, result){\r\n            if (result != null) {\r\n              sessionStorage.setItem(\"balance\", (balance - .50).toFixed(2));\r\n              getBalance();\r\n            }\r\n            else {\r\n              alert(\"There was an error charging your account\")\r\n              props.history.push('/fiftycent');\r\n            }\r\n          })\r\n        }\r\n      }\r\n\r\n      async function getLeaderboard(){\r\n        await new Promise(resolve => setTimeout(resolve, 1500));\r\n        var leaderboard = {\r\n                StartPosition: 0,\r\n                StatisticName: \"HotSauceDaily.50\",\r\n                MaxResultsCount: 50\r\n            };\r\n        PlayFabClient.GetLeaderboard(leaderboard, function (error, result)\r\n                {\r\n                    setLeaderboard(result.data.Leaderboard);\r\n                    console.log(leaders)\r\n                });\r\n            }\r\n    \r\n    return (\r\n        <main>\r\n            <header>\r\n                { balance !== null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Balance: ${balance1}</span>\r\n                    </div>\r\n                    )\r\n                }\r\n                { balance === null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Not Logged In</span> <br></br>\r\n                        <span className=\"balance1\">Balance: $0</span>\r\n                    </div>\r\n                    )\r\n                }\r\n            </header>\r\n            {/iPhone|iPad|iPod|Android/i.test(navigator.userAgent) ? (\r\n            <div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h1 className=\"title\">Hot Sauce Fury!</h1>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <div className=\"col-12\">\r\n                <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n            <div id=\"unity-container\" class=\"unity-desktop\">\r\n            <Unity unityContext={unityContext} width=\"100%\" height=\"100%\"/>\r\n                <div id=\"unity-loading-bar\">\r\n                    <div id=\"unity-logo\"></div>\r\n                    <div id=\"unity-progress-bar-empty\">\r\n                    <div id=\"unity-progress-bar-full\"></div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"unity-footer\">\r\n                    <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"controls\">\r\n                <h4><u>Controls</u></h4>\r\n                      <ol>On PC use the left and right arrows to dodge the hot sauce and collect the food and snacks.</ol>\r\n                      <ol>The mouse can also be used by clicking on either side of the character to move in the corresponding direction.</ol>\r\n                      <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                      <ol>On mobile touch the screen to the right of the character to move to the right and left to move left.</ol>\r\n                    <h4><u>Scoring</u></h4>\r\n                      <ol>Chocolate = 100 points</ol>\r\n                      <ol>Food = Random points between 7 and 12</ol>\r\n                      <ol>Hot Sauce = -1 life</ol>\r\n                </div>\r\n            </div>\r\n            </div> \r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h2 className=\"title\">Leaderboard</h2>\r\n                    <ol className=\"leaderboardList\">\r\n                        {leaders.map((leaderMapped, index) => (\r\n                            <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                        ))}\r\n                    </ol>\r\n                </div>\r\n              </div>\r\n            </div>)\r\n            :\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <h2 className=\"title\">Leaderboard</h2>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                        <h1 className=\"title\">Hot Sauce Fury!</h1>\r\n                    </div>\r\n                    <div className=\"col-3\"></div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <ol className=\"leaderboardList\">\r\n                            {leaders.map((leaderMapped, index) => (\r\n                                <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                            ))}\r\n                        </ol>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                    <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n                <div id=\"unity-container\" class=\"unity-desktop\">\r\n                <Unity unityContext={unityContext} width=\"960px\" height=\"600px\"/>\r\n                    <div id=\"unity-loading-bar\">\r\n                        <div id=\"unity-logo\"></div>\r\n                        <div id=\"unity-progress-bar-empty\">\r\n                        <div id=\"unity-progress-bar-full\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"unity-footer\">\r\n                        <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                    </div>\r\n                    <br></br>\r\n                    <h4><u>Controls</u></h4>\r\n                      <ol>On PC use the left and right arrows to dodge the hot sauce and collect the food and snacks.</ol>\r\n                      <ol>The mouse can also be used by clicking on either side of the character to move in the corresponding direction.</ol>\r\n                      <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                      <ol>On mobile touch the screen to the right of the character to move to the right and left to move left.</ol>\r\n                    <h4><u>Scoring</u></h4>\r\n                      <ol>Chocolate = 100 points</ol>\r\n                      <ol>Food = Random points between 7 and 12</ol>\r\n                      <ol>Hot Sauce = -1 life</ol>\r\n                  </div>\r\n                </div>\r\n                </div>\r\n                <div className=\"col-3\"></div>\r\n                </div>\r\n              }\r\n        </main>\r\n    ) ;\r\n}","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\HotSauceComponents\\HotSauce1.js",["202","203","204"],"import React, { useState, useEffect} from \"react\";\r\nimport '../../utils/TemplateData/style.css'\r\nimport Unity, { UnityContext } from \"react-unity-webgl\";\r\nimport {PlayFabClient} from 'playfab-sdk';\r\n\r\nlet unityContext = new UnityContext({\r\n  codeUrl: \"/games/HotSauce/Build/HotSauce Fury Web.wasm.unityweb\",\r\n  loaderUrl: \"/games/HotSauce/Build/HotSauce Fury Web.loader.js\",\r\n  frameworkUrl: \"/games/HotSauce/Build/HotSauce Fury Web.framework.js.unityweb\",\r\n  dataUrl: \"/games/HotSauce/Build/HotSauce Fury Web.data.unityweb\",\r\n});\r\n\r\nexport default function HotSauce1(props) {\r\n  const [progression, setProgression] = useState(0);\r\n  const [leaders, setLeaderboard] = useState([]);\r\n  const [balance1, setBalance] = useState('');\r\n\r\n  useEffect(()=>{\r\n    getBalance();\r\n    getLeaderboard();\r\n    launchGame();\r\n    }, [])\r\n\r\n  unityContext.on(\"progress\", progressionVal => {\r\n    setProgression(progressionVal * 100);\r\n    console.log(progression);\r\n    });\r\n  unityContext.on('loaded', () => {\r\n    console.log('Done Loading!');\r\n  });\r\n  unityContext.on('receiveMessageFromUnity',  async function receiveMessageFromUnity(txt) {\r\n    // Get element to assign the message\r\n    const finalScore = txt;\r\n    console.log(\"final\" + \" \" + finalScore)\r\n  \r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    var statisticsUpdate = \r\n      {\r\n          PlayFabId: \"1DF75\",\r\n          Statistics:[\r\n          {\r\n            StatisticName: \"HotSauceDaily1\",\r\n            Value: finalScore\r\n          }\r\n        ]\r\n      }\r\n      PlayFabClient.UpdatePlayerStatistics(statisticsUpdate, function (error, result)\r\n      {\r\n        if (result != null){\r\n          alert(\"Your Final Score is: \" + finalScore + \"!\")\r\n          alert(\"Play again to improve your score or play another game! Scores will be reset on Sunday night after 12 PM EST.\")\r\n          props.history.push('/onedollar');\r\n          console.log(\"Leaderboard Updated!\")}\r\n          else if (result == null) {\r\n            alert(\"Something went wrong sending the leaderboard, please contact us\")\r\n            props.history.push('/onedollar');\r\n          }\r\n        })\r\n      }\r\n    );\r\n\r\n  const onFullScreen = () => {\r\n    unityContext.setFullscreen(true);\r\n    };\r\n    var balance;\r\n\r\n    const getBalance = async () => {\r\n        balance = sessionStorage.balance;\r\n        setBalance(balance)\r\n    }\r\n    \r\n    const launchGame = async () => {\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n        if (balance <= 1 ){\r\n            alert(\"Your account is inneficient, please deposit additional funds\")\r\n            props.history.push('/onedollar');\r\n        }\r\n        else {\r\n          verifyPayment();\r\n        }\r\n      }\r\n      \r\n      const verifyPayment = async () => {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        if (window.confirm(\"Please confirm $1 charge to your account to enter this tournament! You will be charged upon clicking Ok.\") == false)\r\n        {\r\n          props.history.push('/onedollar');\r\n        }\r\n        else {\r\n          alert(\"Do not refresh or navigate to another page until your score has been sent to the leaderboard at the end of the game, good luck!.\")\r\n          var subtractCurrency = {\r\n            Amount: 100,\r\n            VirtualCurrency: \"US\"\r\n          }\r\n          PlayFabClient.SubtractUserVirtualCurrency(subtractCurrency, function (error, result){\r\n            if (result != null) {\r\n              sessionStorage.setItem(\"balance\", (balance - 1).toFixed(2));\r\n              getBalance();\r\n            }\r\n            else {\r\n              alert(\"There was an error charging your account\")\r\n              props.history.push('/onedollar');\r\n            }\r\n          })\r\n        }\r\n      }\r\n\r\n    async function getLeaderboard(){\r\n        await new Promise(resolve => setTimeout(resolve, 1500));\r\n        var leaderboard = {\r\n                StartPosition: 0,\r\n                StatisticName: \"HotSauceDaily1\",\r\n                MaxResultsCount: 50\r\n            };\r\n        PlayFabClient.GetLeaderboard(leaderboard, function (error, result)\r\n                {\r\n                    setLeaderboard(result.data.Leaderboard);\r\n                    console.log(leaders)\r\n                });\r\n            }\r\n    \r\n    return (\r\n            <main>\r\n                <header>\r\n                { balance !== null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Balance: ${balance1}</span>\r\n                    </div>\r\n                    )\r\n                }\r\n                { balance === null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Not Logged In</span> <br></br>\r\n                        <span className=\"balance1\">Balance: $0</span>\r\n                    </div>\r\n                    )\r\n                }\r\n            </header>\r\n            {/iPhone|iPad|iPod|Android/i.test(navigator.userAgent) ? (\r\n            <div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h1 className=\"title\">Hot Sauce Fury!</h1>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <div className=\"col-12\">\r\n                <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n            <div id=\"unity-container\" class=\"unity-desktop\">\r\n            <Unity unityContext={unityContext} width=\"100%\" height=\"100%\"/>\r\n                <div id=\"unity-loading-bar\">\r\n                    <div id=\"unity-logo\"></div>\r\n                    <div id=\"unity-progress-bar-empty\">\r\n                    <div id=\"unity-progress-bar-full\"></div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"unity-footer\">\r\n                    <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"controls\">\r\n                <h4><u>Controls</u></h4>\r\n                      <ol>On PC use the left and right arrows to dodge the hot sauce and collect the food and snacks.</ol>\r\n                      <ol>The mouse can also be used by clicking on either side of the character to move in the corresponding direction.</ol>\r\n                      <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                      <ol>On mobile touch the screen to the right of the character to move to the right and left to move left.</ol>\r\n                    <h4><u>Scoring</u></h4>\r\n                      <ol>Chocolate = 100 points</ol>\r\n                      <ol>Food = Random points between 7 and 12</ol>\r\n                      <ol>Hot Sauce = -1 life</ol>\r\n                </div>\r\n            </div>\r\n            </div> \r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h2 className=\"title\">Leaderboard</h2>\r\n                    <ol className=\"leaderboardList\">\r\n                        {leaders.map((leaderMapped, index) => (\r\n                            <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                        ))}\r\n                    </ol>\r\n                </div>\r\n              </div>\r\n            </div>)\r\n            :\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <h2 className=\"title\">Leaderboard</h2>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                        <h1 className=\"title\">Hot Sauce Fury!</h1>\r\n                    </div>\r\n                    <div className=\"col-3\"></div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <ol className=\"leaderboardList\">\r\n                            {leaders.map((leaderMapped, index) => (\r\n                                <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                            ))}\r\n                        </ol>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                    <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n                <div id=\"unity-container\" class=\"unity-desktop\">\r\n                <Unity unityContext={unityContext} width=\"960px\" height=\"600px\"/>\r\n                    <div id=\"unity-loading-bar\">\r\n                        <div id=\"unity-logo\"></div>\r\n                        <div id=\"unity-progress-bar-empty\">\r\n                        <div id=\"unity-progress-bar-full\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"unity-footer\">\r\n                        <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                    </div>\r\n                    <br></br>\r\n                    <h4><u>Controls</u></h4>\r\n                      <ol>On PC use the left and right arrows to dodge the hot sauce and collect the food and snacks.</ol>\r\n                      <ol>The mouse can also be used by clicking on either side of the character to move in the corresponding direction.</ol>\r\n                      <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                      <ol>On mobile touch the screen to the right of the character to move to the right and left to move left.</ol>\r\n                    <h4><u>Scoring</u></h4>\r\n                      <ol>Chocolate = 100 points</ol>\r\n                      <ol>Food = Random points between 7 and 12</ol>\r\n                      <ol>Hot Sauce = -1 life</ol>\r\n                  </div>\r\n                </div>\r\n                </div>\r\n                <div className=\"col-3\"></div>\r\n                </div>\r\n              }\r\n            </main>\r\n        ) ;\r\n    }","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\HotSauceComponents\\HotSauce05.js",["205","206","207"],"import React, { useState, useEffect} from \"react\";\r\nimport '../../utils/TemplateData/style.css'\r\nimport Unity, { UnityContext } from \"react-unity-webgl\";\r\nimport {PlayFabClient} from 'playfab-sdk';\r\n\r\nlet unityContext = new UnityContext({\r\n  codeUrl: \"/games/HotSauce/Build/HotSauce Fury Web.wasm.unityweb\",\r\n  loaderUrl: \"/games/HotSauce/Build/HotSauce Fury Web.loader.js\",\r\n  frameworkUrl: \"/games/HotSauce/Build/HotSauce Fury Web.framework.js.unityweb\",\r\n  dataUrl: \"/games/HotSauce/Build/HotSauce Fury Web.data.unityweb\",\r\n});\r\n\r\nexport default function HotSauce05(props) {\r\n  const [progression, setProgression] = useState(0);\r\n  const [leaders, setLeaderboard] = useState([]);\r\n  const [balance1, setBalance] = useState('');\r\n  useEffect(()=>{\r\n    getBalance();\r\n    getLeaderboard()\r\n    launchGame();\r\n    }, [])\r\n\r\n  unityContext.on(\"progress\", progressionVal => {\r\n    setProgression(progressionVal * 100);\r\n    console.log(progression);\r\n    });\r\n  unityContext.on('loaded', () => {\r\n    console.log('Done Loading!');\r\n  });\r\n  unityContext.on('receiveMessageFromUnity',  async function receiveMessageFromUnity(txt) {\r\n    // Get element to assign the message\r\n    const finalScore = txt;\r\n    console.log(\"final\" + \" \" + finalScore)\r\n  \r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    var statisticsUpdate = \r\n      {\r\n          PlayFabId: \"1DF75\",\r\n          Statistics:[\r\n          {\r\n            StatisticName: \"HotSauceDaily.05\",\r\n            Value: finalScore\r\n          }\r\n        ]\r\n      }\r\n      PlayFabClient.UpdatePlayerStatistics(statisticsUpdate, function (error, result)\r\n      {\r\n        if (result != null){\r\n          alert(\"Your Final Score is: \" + finalScore + \"!\")\r\n          alert(\"Play again to improve your score or play another game! Scores will be reset on Sunday night after 12 PM EST.\")\r\n          props.history.push('/fivecent');\r\n          console.log(\"Leaderboard Updated!\")}\r\n          else if (result == null) {\r\n            alert(\"Something went wrong sending the leaderboard, please contact us\")\r\n            props.history.push('/fivecent');\r\n          }\r\n        })\r\n      }\r\n    );\r\n\r\n    const onFullScreen = () => {\r\n        unityContext.setFullscreen(true);\r\n        };\r\n    var balance;\r\n\r\n    const getBalance = async () => {\r\n        balance = sessionStorage.balance;\r\n        setBalance(balance)\r\n    }\r\n    \r\n    const launchGame = async () => {\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n        if (balance <= .05 ){\r\n            alert(\"Your account is inneficient, please deposit additional funds\")\r\n            props.history.push('/fivecent');\r\n        }\r\n        else {\r\n          verifyPayment();\r\n        }\r\n      }\r\n      \r\n      const verifyPayment = async () => {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        if (window.confirm(\"Please confirm 5¢ charge to your account to enter this tournament! You will be charged upon clicking Ok.\") == false)\r\n        {\r\n          props.history.push('/fivecent');\r\n        }\r\n        else {\r\n          alert(\"Do not refresh or navigate to another page until your score has been sent to the leaderboard at the end of the game, good luck!.\")\r\n          var subtractCurrency = {\r\n            Amount: 5,\r\n            VirtualCurrency: \"US\"\r\n          }\r\n          PlayFabClient.SubtractUserVirtualCurrency(subtractCurrency, function (error, result){\r\n            if (result != null) {\r\n              sessionStorage.setItem(\"balance\", (balance - .05).toFixed(2));\r\n              getBalance();\r\n            }\r\n            else {\r\n              alert(\"There was an error charging your account\")\r\n              props.history.push('/fivecent');\r\n            }\r\n          })\r\n        }\r\n      }\r\n\r\n      async function getLeaderboard(){\r\n        await new Promise(resolve => setTimeout(resolve, 1500));\r\n        var leaderboard = {\r\n                StartPosition: 0,\r\n                StatisticName: \"HotSauceDaily.05\",\r\n                MaxResultsCount: 50\r\n            };\r\n        PlayFabClient.GetLeaderboard(leaderboard, function (error, result)\r\n                {\r\n                    setLeaderboard(result.data.Leaderboard);\r\n                    console.log(leaders)\r\n                });\r\n            }\r\n    \r\n    return (\r\n        <main>\r\n            <header>\r\n                { balance !== null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Balance: ${balance1}</span>\r\n                    </div>\r\n                    )\r\n                }\r\n                { balance === null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Not Logged In</span> <br></br>\r\n                        <span className=\"balance1\">Balance: $0</span>\r\n                    </div>\r\n                    )\r\n                }\r\n            </header>\r\n            {/iPhone|iPad|iPod|Android/i.test(navigator.userAgent) ? (\r\n            <div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h1 className=\"title\">Hot Sauce Fury!</h1>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <div className=\"col-12\">\r\n                <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n            <div id=\"unity-container\" class=\"unity-desktop\">\r\n            <Unity unityContext={unityContext} width=\"100%\" height=\"100%\"/>\r\n                <div id=\"unity-loading-bar\">\r\n                    <div id=\"unity-logo\"></div>\r\n                    <div id=\"unity-progress-bar-empty\">\r\n                    <div id=\"unity-progress-bar-full\"></div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"unity-footer\">\r\n                    <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"controls\">\r\n                <h4><u>Controls</u></h4>\r\n                      <ol>On PC use the left and right arrows to dodge the hot sauce and collect the food and snacks.</ol>\r\n                      <ol>The mouse can also be used by clicking on either side of the character to move in the corresponding direction.</ol>\r\n                      <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                      <ol>On mobile touch the screen to the right of the character to move to the right and left to move left.</ol>\r\n                    <h4><u>Scoring</u></h4>\r\n                      <ol>Chocolate = 100 points</ol>\r\n                      <ol>Food = Random points between 7 and 12</ol>\r\n                      <ol>Hot Sauce = -1 life</ol>\r\n                </div>\r\n            </div>\r\n            </div> \r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h2 className=\"title\">Leaderboard</h2>\r\n                    <ol className=\"leaderboardList\">\r\n                        {leaders.map((leaderMapped, index) => (\r\n                            <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                        ))}\r\n                    </ol>\r\n                </div>\r\n              </div>\r\n            </div>)\r\n            :\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <h2 className=\"title\">Leaderboard</h2>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                        <h1 className=\"title\">Hot Sauce Fury!</h1>\r\n                    </div>\r\n                    <div className=\"col-3\"></div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <ol className=\"leaderboardList\">\r\n                            {leaders.map((leaderMapped, index) => (\r\n                                <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                            ))}\r\n                        </ol>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                    <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n                <div id=\"unity-container\" class=\"unity-desktop\">\r\n                <Unity unityContext={unityContext} width=\"960px\" height=\"600px\"/>\r\n                    <div id=\"unity-loading-bar\">\r\n                        <div id=\"unity-logo\"></div>\r\n                        <div id=\"unity-progress-bar-empty\">\r\n                        <div id=\"unity-progress-bar-full\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"unity-footer\">\r\n                        <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                    </div>\r\n                    <br></br>\r\n                    <h4><u>Controls</u></h4>\r\n                      <ol>On PC use the left and right arrows to dodge the hot sauce and collect the food and snacks.</ol>\r\n                      <ol>The mouse can also be used by clicking on either side of the character to move in the corresponding direction.</ol>\r\n                      <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                      <ol>On mobile touch the screen to the right of the character to move to the right and left to move left.</ol>\r\n                    <h4><u>Scoring</u></h4>\r\n                      <ol>Chocolate = 100 points</ol>\r\n                      <ol>Food = Random points between 7 and 12</ol>\r\n                      <ol>Hot Sauce = -1 life</ol>\r\n                  </div>\r\n                </div>\r\n                </div>\r\n                <div className=\"col-3\"></div>\r\n                </div>\r\n              }\r\n        </main>\r\n    ) ;\r\n}","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\HotSauceComponents\\HotSauceFree.js",["208"],"import React, { useState, useEffect }from 'react';\r\nimport '../../utils/TemplateData/style.css'\r\nimport Unity, { UnityContext } from \"react-unity-webgl\";\r\n\r\nlet unityContext = new UnityContext({\r\n    codeUrl: \"/games/HotSauce/Build/HotSauce Fury Web.wasm.unityweb\",\r\n    loaderUrl: \"/games/HotSauce/Build/HotSauce Fury Web.loader.js\",\r\n    frameworkUrl: \"/games/HotSauce/Build/HotSauce Fury Web.framework.js.unityweb\",\r\n    dataUrl: \"/games/HotSauce/Build/HotSauce Fury Web.data.unityweb\",\r\n});\r\n\r\nexport default function HotSauceFree(props) {\r\n    const [balance, setBalance] = useState('');\r\n\r\n    useEffect(() => {\r\n        getBalance();\r\n    })\r\n\r\n    const getBalance = async () => {\r\n        if (sessionStorage.getItem(\"balance\")) {\r\n            setBalance(sessionStorage.balance);\r\n            console.log(balance)\r\n        }\r\n        else {\r\n            setBalance(null);\r\n            console.log(balance)\r\n        }\r\n    }\r\n    const [progression, setProgression] = useState(0);\r\n\r\n    unityContext.on(\"progress\", progressionVal => {\r\n        setProgression(progressionVal * 100);\r\n        console.log(progression);\r\n        });\r\n    unityContext.on('loaded', () => {\r\n        console.log('Done Loading!');\r\n    });\r\n    unityContext.on('receiveMessageFromUnity',  async function receiveMessageFromUnity(txt) {\r\n        // Get element to assign the message\r\n        const finalScore = txt;\r\n        console.log(\"final\" + \" \" + finalScore)\r\n\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        alert(\"Play again or play another game!\")\r\n        props.history.push('/free');\r\n    });\r\n\r\n    const onFullScreen = () => {\r\n        unityContext.setFullscreen(true);\r\n    };\r\n    \r\n    return (\r\n        <main>\r\n            <header>\r\n                { balance !== null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Balance: ${balance}</span>\r\n                    </div>\r\n                    )\r\n                }\r\n                { balance === null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Not Logged In</span> <br></br>\r\n                        <span className=\"balance1\">Balance: $0</span>\r\n                    </div>\r\n                    )\r\n                }\r\n            </header>\r\n                <h1 className=\"title\">Hot Sauce Fury!</h1>\r\n                <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n            <div id=\"unity-container\" class=\"unity-desktop\">\r\n            {/iPhone|iPad|iPod|Android/i.test(navigator.userAgent) ? (<Unity unityContext={unityContext} width=\"100%\" height=\"100%\"/>) :\r\n                (<Unity unityContext={unityContext} width=\"960px\" height=\"600px\"/>)\r\n            }\r\n                <div id=\"unity-loading-bar\">\r\n                    <div id=\"unity-logo\"></div>\r\n                    <div id=\"unity-progress-bar-empty\">\r\n                    <div id=\"unity-progress-bar-full\"></div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"unity-footer\">\r\n                <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"controls\">\r\n                <h4><u>Controls</u></h4>\r\n                    <ol>On PC use the left and right arrows to dodge the hot sauce and collect the food and snacks.</ol>\r\n                    <ol>The mouse can also be used by clicking on either side of the character to move in the corresponding direction.</ol>\r\n                    <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                    <ol>On mobile touch the screen to the right of the character to move to the right and left to move left.</ol>\r\n                <h4><u>Scoring</u></h4>\r\n                    <ol>Chocolate = 100 points</ol>\r\n                    <ol>Food = Random points between 7 and 12</ol>\r\n                    <ol>Hot Sauce = -1 life</ol>\r\n                </div>\r\n            </div>\r\n        </main>\r\n    ) ;\r\n}","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\utils\\PrivateFiveCent.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\utils\\PrivateFiftyCent.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\utils\\PrivateOneDollar.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\utils\\PrivateFiveDollar.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\SpaceShooterComponents\\SpaceShooterFree.js",[],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Balance.js",[],["209","210"],"C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\CrazyPongComponents\\CrazyPong01.js",["211","212","213"],"import React, { useState, useEffect} from \"react\";\r\nimport '../../utils/TemplateData/style.css'\r\nimport Unity, { UnityContext } from \"react-unity-webgl\";\r\nimport {PlayFabClient} from 'playfab-sdk';\r\n\r\nlet unityContext = new UnityContext({\r\n  codeUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.wasm.unityweb\",\r\n  loaderUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.loader.js\",\r\n  frameworkUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.framework.js.unityweb\",\r\n  dataUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.data.unityweb\",\r\n});\r\n\r\nexport default function CrazyPong01(props) {\r\n  const [progression, setProgression] = useState(0);\r\n  const [leaders, setLeaderboard] = useState([]);\r\n  const [balance1, setBalance] = useState('');\r\n  useEffect(()=>{\r\n    getBalance();\r\n    getLeaderboard()\r\n    launchGame();\r\n    }, [])\r\n\r\n  unityContext.on(\"progress\", progressionVal => {\r\n    setProgression(progressionVal * 100);\r\n    console.log(progression);\r\n    });\r\n  unityContext.on('loaded', () => {\r\n    console.log('Done Loading!');\r\n  });\r\n  unityContext.on('receiveMessageFromUnity',  async function receiveMessageFromUnity(txt) {\r\n    // Get element to assign the message\r\n    const finalScore = txt;\r\n    console.log(\"final\" + \" \" + finalScore)\r\n  \r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    var statisticsUpdate = \r\n      {\r\n          PlayFabId: \"1DF75\",\r\n          Statistics:[\r\n          {\r\n            StatisticName: \"CrazyPongDaily\",\r\n            Value: finalScore\r\n          }\r\n        ]\r\n      }\r\n      PlayFabClient.UpdatePlayerStatistics(statisticsUpdate, function (error, result)\r\n      {\r\n        if (result != null){\r\n          alert(\"Your Final Score is: \" + finalScore + \"!\")\r\n          alert(\"Play again to improve your score or play another game! Scores will be reset on Sunday night after 12 PM EST.\")\r\n          props.history.push('/onecent');\r\n          console.log(\"Leaderboard Updated!\")}\r\n          else if (result == null) {\r\n            alert(\"Something went wrong sending the leaderboard, please contact us\")\r\n            props.history.push('/onecent');\r\n          }\r\n        })\r\n      }\r\n    );\r\n\r\n  const onFullScreen = () => {\r\n    unityContext.setFullscreen(true);\r\n    };\r\n    var balance;\r\n\r\n    const getBalance = async () => {\r\n      balance = sessionStorage.balance;\r\n      setBalance(balance)\r\n    }\r\n    \r\n    const launchGame = async () => {\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n        if (balance <= .01 ){\r\n            alert(\"Your account is inneficient, please deposit additional funds\")\r\n            props.history.push('/onecent');\r\n        }\r\n        else {\r\n          verifyPayment();\r\n        }\r\n      }\r\n      \r\n      const verifyPayment = async () => {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        if (window.confirm(\"Please confirm 1¢ charge to your account to enter this tournament! You will be charged upon clicking Ok.\") == false)\r\n        {\r\n          props.history.push('/onecent');\r\n        }\r\n        else {\r\n          alert(\"Do not refresh or navigate to another page until your score has been sent to the leaderboard at the end of the game, good luck!.\")\r\n          var subtractCurrency = {\r\n            Amount: 1,\r\n            VirtualCurrency: \"US\"\r\n          }\r\n          PlayFabClient.SubtractUserVirtualCurrency(subtractCurrency, function (error, result){\r\n            if (result != null) {\r\n              sessionStorage.setItem(\"balance\", (balance - .01).toFixed(2));\r\n              getBalance();\r\n            }\r\n            else {\r\n              alert(\"There was an error charging your account\")\r\n              props.history.push('/onecent');\r\n            }\r\n          })\r\n        }\r\n      }\r\n\r\n      async function getLeaderboard(){\r\n        await new Promise(resolve => setTimeout(resolve, 1500));\r\n        var leaderboard = {\r\n                StartPosition: 0,\r\n                StatisticName: \"CrazyPongDaily\",\r\n                MaxResultsCount: 50\r\n            };\r\n        PlayFabClient.GetLeaderboard(leaderboard, function (error, result)\r\n                {\r\n                    setLeaderboard(result.data.Leaderboard);\r\n                    console.log(leaders)\r\n                });\r\n            }\r\n    \r\n      return (\r\n        <main>\r\n            <header>\r\n                { balance !== null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Balance: ${balance1}</span>\r\n                    </div>\r\n                    )\r\n                }\r\n                { balance === null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Not Logged In</span> <br></br>\r\n                        <span className=\"balance1\">Balance: $0</span>\r\n                    </div>\r\n                    )\r\n                }\r\n            </header>\r\n            {/iPhone|iPad|iPod|Android/i.test(navigator.userAgent) ? (\r\n            <div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h1 className=\"title\">Crazy Pong!</h1>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <div className=\"col-12\">\r\n                <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n            <div id=\"unity-container\" class=\"unity-desktop\">\r\n            <Unity unityContext={unityContext} width=\"100%\" height=\"100%\"/>\r\n                <div id=\"unity-loading-bar\">\r\n                    <div id=\"unity-logo\"></div>\r\n                    <div id=\"unity-progress-bar-empty\">\r\n                    <div id=\"unity-progress-bar-full\"></div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"unity-footer\">\r\n                    <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"controls\">\r\n                <h4><u>Controls</u></h4>\r\n                    <ol>On PC use the left and right arrows to move back and forth to block the ball from hitting the bottom of the screen.</ol>\r\n                    <ol>The mouse can also be used by clicking on either side of the paddle to move in the corresponding direction.</ol>\r\n                    <ol>Attempt to direct the ball to avoid the grenades and collect gems and crates.</ol>\r\n                    <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                    <ol>On mobile touch the screen to the right of the paddle to move to the right and left to move left.</ol>\r\n                <h4><u>Scoring</u></h4>\r\n                    <ol>Crate = 50 points</ol>\r\n                    <ol>Gem = 10 points</ol>\r\n                    <ol>Top-of-Screen = 1 point</ol>\r\n                    <ol>Bottom-of-Screen = -1 life</ol>\r\n                </div>\r\n            </div>\r\n            </div> \r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h2 className=\"title\">Leaderboard</h2>\r\n                    <ol className=\"leaderboardList\">\r\n                        {leaders.map((leaderMapped, index) => (\r\n                            <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                        ))}\r\n                    </ol>\r\n                </div>\r\n              </div>\r\n            </div>)\r\n            :\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <h2 className=\"title\">Leaderboard</h2>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                        <h1 className=\"title\">Crazy Pong!</h1>\r\n                    </div>\r\n                    <div className=\"col-3\"></div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <ol className=\"leaderboardList\">\r\n                            {leaders.map((leaderMapped, index) => (\r\n                                <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                            ))}\r\n                        </ol>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                    <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n                <div id=\"unity-container\" class=\"unity-desktop\">\r\n                <Unity unityContext={unityContext} width=\"960px\" height=\"600px\"/>\r\n                    <div id=\"unity-loading-bar\">\r\n                        <div id=\"unity-logo\"></div>\r\n                        <div id=\"unity-progress-bar-empty\">\r\n                        <div id=\"unity-progress-bar-full\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"unity-footer\">\r\n                        <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                    </div>\r\n                    <br></br>\r\n                    <h4><u>Controls</u></h4>\r\n                    <ol>On PC use the left and right arrows to move back and forth to block the ball from hitting the bottom of the screen.</ol>\r\n                    <ol>The mouse can also be used by clicking on either side of the paddle to move in the corresponding direction.</ol>\r\n                    <ol>Attempt to direct the ball to avoid the grenades and collect gems and crates.</ol>\r\n                    <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                    <ol>On mobile touch the screen to the right of the paddle to move to the right and left to move left.</ol>\r\n                  <h4><u>Scoring</u></h4>\r\n                    <ol>Crate = 50 points</ol>\r\n                    <ol>Gem = 10 points</ol>\r\n                    <ol>Top-of-Screen = 1 point</ol>\r\n                    <ol>Bottom-of-Screen = -1 life</ol>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                <div className=\"col-3\"></div>\r\n                </div>\r\n              }\r\n        </main>\r\n    ) ;\r\n}","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\CrazyPongComponents\\CrazyPongFree.js",["214"],"import React, { useState, useEffect }from 'react';\r\nimport '../../utils/TemplateData/style.css'\r\nimport Unity, { UnityContext } from \"react-unity-webgl\";\r\n\r\nlet unityContext = new UnityContext({\r\n    codeUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.wasm.unityweb\",\r\n    loaderUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.loader.js\",\r\n    frameworkUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.framework.js.unityweb\",\r\n    dataUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.data.unityweb\",\r\n});\r\n\r\nexport default function CrazyPongFree(props) {\r\n    const [balance, setBalance] = useState('');\r\n\r\n    useEffect(() => {\r\n        getBalance();\r\n    })\r\n\r\n    const getBalance = async () => {\r\n        if (sessionStorage.getItem(\"balance\")) {\r\n            setBalance(sessionStorage.balance);\r\n            console.log(balance)\r\n        }\r\n        else {\r\n            setBalance(null);\r\n            console.log(balance)\r\n        }\r\n    }\r\n    const [progression, setProgression] = useState(0);\r\n\r\n    unityContext.on(\"progress\", progressionVal => {\r\n        setProgression(progressionVal * 100);\r\n        console.log(progression);\r\n        });\r\n    unityContext.on('loaded', () => {\r\n        console.log('Done Loading!');\r\n    });\r\n    unityContext.on('receiveMessageFromUnity',  async function receiveMessageFromUnity(txt) {\r\n        // Get element to assign the message\r\n        const finalScore = txt;\r\n        console.log(\"final\" + \" \" + finalScore)\r\n\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        alert(\"Play again or play another game!\")\r\n        props.history.push('/free');\r\n    });\r\n\r\n    const onFullScreen = () => {\r\n        unityContext.setFullscreen(true);\r\n    };\r\n    \r\n    return (\r\n        <main>\r\n            <header>\r\n                { balance !== null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Balance: ${balance}</span>\r\n                    </div>\r\n                    )\r\n                }\r\n                { balance === null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Not Logged In</span> <br></br>\r\n                        <span className=\"balance1\">Balance: $0</span>\r\n                    </div>\r\n                    )\r\n                }\r\n            </header>\r\n                <h1 className=\"title\">Crazy Pong!</h1>\r\n                <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n            <div id=\"unity-container\" class=\"unity-desktop\">\r\n            {/iPhone|iPad|iPod|Android/i.test(navigator.userAgent) ? (<Unity unityContext={unityContext} width=\"100%\" height=\"100%\"/>) :\r\n                (<Unity unityContext={unityContext} width=\"960px\" height=\"600px\"/>)\r\n            }\r\n                <div id=\"unity-loading-bar\">\r\n                    <div id=\"unity-logo\"></div>\r\n                    <div id=\"unity-progress-bar-empty\">\r\n                    <div id=\"unity-progress-bar-full\"></div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"unity-footer\">\r\n                    <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"controls\">\r\n                <h4><u>Controls</u></h4>\r\n                    <ol>On PC use the left and right arrows to move back and forth to block the ball from hitting the bottom of the screen.</ol>\r\n                    <ol>The mouse can also be used by clicking on either side of the paddle to move in the corresponding direction.</ol>\r\n                    <ol>Attempt to direct the ball to avoid the grenades and collect gems and crates.</ol>\r\n                    <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                    <ol>On mobile touch the screen to the right of the paddle to move to the right and left to move left.</ol>\r\n                <h4><u>Scoring</u></h4>\r\n                    <ol>Crate = 50 points</ol>\r\n                    <ol>Gem = 10 points</ol>\r\n                    <ol>Top-of-Screen = 1 point</ol>\r\n                    <ol>Bottom-of-Screen = -1 life</ol>\r\n                </div>\r\n            </div>\r\n        </main>\r\n    ) ;\r\n}","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\CrazyPongComponents\\CrazyPong50.js",["215","216","217"],"import React, { useState, useEffect} from \"react\";\r\nimport '../../utils/TemplateData/style.css'\r\nimport Unity, { UnityContext } from \"react-unity-webgl\";\r\nimport {PlayFabClient} from 'playfab-sdk';\r\n\r\nlet unityContext = new UnityContext({\r\n  codeUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.wasm.unityweb\",\r\n  loaderUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.loader.js\",\r\n  frameworkUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.framework.js.unityweb\",\r\n  dataUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.data.unityweb\",\r\n});\r\n\r\nexport default function CrazyPong50(props) {\r\n    const [progression, setProgression] = useState(0);\r\n    const [leaders, setLeaderboard] = useState([]);\r\n    const [balance1, setBalance] = useState('');\r\n    useEffect(()=>{\r\n        getBalance();\r\n        getLeaderboard()\r\n        launchGame();\r\n    }, [])\r\n\r\n  unityContext.on(\"progress\", progressionVal => {\r\n    setProgression(progressionVal * 100);\r\n    console.log(progression);\r\n    });\r\n  unityContext.on('loaded', () => {\r\n    console.log('Done Loading!');\r\n  });\r\n  unityContext.on('receiveMessageFromUnity',  async function receiveMessageFromUnity(txt) {\r\n    // Get element to assign the message\r\n    const finalScore = txt;\r\n    console.log(\"final\" + \" \" + finalScore)\r\n  \r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    var statisticsUpdate = \r\n      {\r\n          PlayFabId: \"1DF75\",\r\n          Statistics:[\r\n          {\r\n            StatisticName: \"CrazyPongDaily.50\",\r\n            Value: finalScore\r\n          }\r\n        ]\r\n      }\r\n      PlayFabClient.UpdatePlayerStatistics(statisticsUpdate, function (error, result)\r\n      {\r\n        if (result != null){\r\n          alert(\"Your Final Score is: \" + finalScore + \"!\")\r\n          alert(\"Play again to improve your score or play another game! Scores will be reset on Sunday night after 12 PM EST.\")\r\n          props.history.push('/fiftycent');\r\n          console.log(\"Leaderboard Updated!\")}\r\n          else if (result == null) {\r\n            alert(\"Something went wrong sending the leaderboard, please contact us\")\r\n            props.history.push('/fiftycent');\r\n          }\r\n        })\r\n      }\r\n    );\r\n\r\n  const onFullScreen = () => {\r\n    unityContext.setFullscreen(true);\r\n    };\r\n    var balance;\r\n\r\n    const getBalance = async () => {\r\n      balance = sessionStorage.balance;\r\n      setBalance(balance)\r\n    }\r\n    \r\n    const launchGame = async () => {\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n        if (balance <= .50 ){\r\n            alert(\"Your account is inneficient, please deposit additional funds\")\r\n            props.history.push('/fiftycent');\r\n        }\r\n        else {\r\n          verifyPayment();\r\n        }\r\n      }\r\n      \r\n      const verifyPayment = async () => {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        if (window.confirm(\"Please confirm 50¢ charge to your account to enter this tournament! You will be charged upon clicking Ok.\") == false)\r\n        {\r\n          props.history.push('/fiftycent');\r\n        }\r\n        else {\r\n          alert(\"Do not refresh or navigate to another page until your score has been sent to the leaderboard at the end of the game, good luck!.\")\r\n          var subtractCurrency = {\r\n            Amount: 50,\r\n            VirtualCurrency: \"US\"\r\n          }\r\n          PlayFabClient.SubtractUserVirtualCurrency(subtractCurrency, function (error, result){\r\n            if (result != null) {\r\n              sessionStorage.setItem(\"balance\", (balance - .50).toFixed(2));\r\n              getBalance();\r\n            }\r\n            else {\r\n              alert(\"There was an error charging your account\")\r\n              props.history.push('/fiftycent');\r\n            }\r\n          })\r\n        }\r\n      }\r\n\r\n      async function getLeaderboard(){\r\n        await new Promise(resolve => setTimeout(resolve, 1500));\r\n        var leaderboard = {\r\n                StartPosition: 0,\r\n                StatisticName: \"CrazyPongDaily.50\",\r\n                MaxResultsCount: 50\r\n            };\r\n        PlayFabClient.GetLeaderboard(leaderboard, function (error, result)\r\n                {\r\n                    setLeaderboard(result.data.Leaderboard);\r\n                    console.log(leaders)\r\n                });\r\n            }\r\n    \r\n    return (\r\n        <main>\r\n            <header>\r\n                { balance !== null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Balance: ${balance1}</span>\r\n                    </div>\r\n                    )\r\n                }\r\n                { balance === null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Not Logged In</span> <br></br>\r\n                        <span className=\"balance1\">Balance: $0</span>\r\n                    </div>\r\n                    )\r\n                }\r\n            </header>\r\n            {/iPhone|iPad|iPod|Android/i.test(navigator.userAgent) ? (\r\n            <div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h1 className=\"title\">Crazy Pong!</h1>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <div className=\"col-12\">\r\n                <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n            <div id=\"unity-container\" class=\"unity-desktop\">\r\n            <Unity unityContext={unityContext} width=\"100%\" height=\"100%\"/>\r\n                <div id=\"unity-loading-bar\">\r\n                    <div id=\"unity-logo\"></div>\r\n                    <div id=\"unity-progress-bar-empty\">\r\n                    <div id=\"unity-progress-bar-full\"></div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"unity-footer\">\r\n                    <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"controls\">\r\n                <h4><u>Controls</u></h4>\r\n                    <ol>On PC use the left and right arrows to move back and forth to block the ball from hitting the bottom of the screen.</ol>\r\n                    <ol>The mouse can also be used by clicking on either side of the paddle to move in the corresponding direction.</ol>\r\n                    <ol>Attempt to direct the ball to avoid the grenades and collect gems and crates.</ol>\r\n                    <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                    <ol>On mobile touch the screen to the right of the paddle to move to the right and left to move left.</ol>\r\n                <h4><u>Scoring</u></h4>\r\n                    <ol>Crate = 50 points</ol>\r\n                    <ol>Gem = 10 points</ol>\r\n                    <ol>Top-of-Screen = 1 point</ol>\r\n                    <ol>Bottom-of-Screen = -1 life</ol>\r\n                </div>\r\n            </div>\r\n            </div> \r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h2 className=\"title\">Leaderboard</h2>\r\n                    <ol className=\"leaderboardList\">\r\n                        {leaders.map((leaderMapped, index) => (\r\n                            <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                        ))}\r\n                    </ol>\r\n                </div>\r\n              </div>\r\n            </div>)\r\n            :\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <h2 className=\"title\">Leaderboard</h2>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                        <h1 className=\"title\">Crazy Pong!</h1>\r\n                    </div>\r\n                    <div className=\"col-3\"></div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <ol className=\"leaderboardList\">\r\n                            {leaders.map((leaderMapped, index) => (\r\n                                <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                            ))}\r\n                        </ol>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                    <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n                <div id=\"unity-container\" class=\"unity-desktop\">\r\n                <Unity unityContext={unityContext} width=\"960px\" height=\"600px\"/>\r\n                    <div id=\"unity-loading-bar\">\r\n                        <div id=\"unity-logo\"></div>\r\n                        <div id=\"unity-progress-bar-empty\">\r\n                        <div id=\"unity-progress-bar-full\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"unity-footer\">\r\n                        <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                    </div>\r\n                    <br></br>\r\n                    <h4><u>Controls</u></h4>\r\n                    <ol>On PC use the left and right arrows to move back and forth to block the ball from hitting the bottom of the screen.</ol>\r\n                    <ol>The mouse can also be used by clicking on either side of the paddle to move in the corresponding direction.</ol>\r\n                    <ol>Attempt to direct the ball to avoid the grenades and collect gems and crates.</ol>\r\n                    <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                    <ol>On mobile touch the screen to the right of the paddle to move to the right and left to move left.</ol>\r\n                  <h4><u>Scoring</u></h4>\r\n                    <ol>Crate = 50 points</ol>\r\n                    <ol>Gem = 10 points</ol>\r\n                    <ol>Top-of-Screen = 1 point</ol>\r\n                    <ol>Bottom-of-Screen = -1 life</ol>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                <div className=\"col-3\"></div>\r\n                </div>\r\n              }\r\n        </main>\r\n    ) ;\r\n}","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\CrazyPongComponents\\CrazyPong05.js",["218","219","220"],"import React, { useState, useEffect} from \"react\";\r\nimport '../../utils/TemplateData/style.css'\r\nimport Unity, { UnityContext } from \"react-unity-webgl\";\r\nimport {PlayFabClient} from 'playfab-sdk';\r\n\r\nlet unityContext = new UnityContext({\r\n  codeUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.wasm.unityweb\",\r\n  loaderUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.loader.js\",\r\n  frameworkUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.framework.js.unityweb\",\r\n  dataUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.data.unityweb\",\r\n});\r\n\r\nexport default function CrazyPong05(props) {\r\n  const [progression, setProgression] = useState(0);\r\n  const [leaders, setLeaderboard] = useState([]);\r\n  const [balance1, setBalance] = useState('');\r\n  useEffect(()=>{\r\n    getBalance();\r\n    getLeaderboard()\r\n    launchGame();\r\n    }, [])\r\n\r\n  unityContext.on(\"progress\", progressionVal => {\r\n    setProgression(progressionVal * 100);\r\n    console.log(progression);\r\n    });\r\n  unityContext.on('loaded', () => {\r\n    console.log('Done Loading!');\r\n  });\r\n  unityContext.on('receiveMessageFromUnity',  async function receiveMessageFromUnity(txt) {\r\n    // Get element to assign the message\r\n    const finalScore = txt;\r\n    console.log(\"final\" + \" \" + finalScore)\r\n  \r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    var statisticsUpdate = \r\n      {\r\n          PlayFabId: \"1DF75\",\r\n          Statistics:[\r\n          {\r\n            StatisticName: \"CrazyPongDaily.05\",\r\n            Value: finalScore\r\n          }\r\n        ]\r\n      }\r\n      PlayFabClient.UpdatePlayerStatistics(statisticsUpdate, function (error, result)\r\n      {\r\n        if (result != null){\r\n          alert(\"Your Final Score is: \" + finalScore + \"!\")\r\n          alert(\"Play again to improve your score or play another game! Scores will be reset on Sunday night after 12 PM EST.\")\r\n          props.history.push('/fivecent');\r\n          console.log(\"Leaderboard Updated!\")}\r\n          else if (result == null) {\r\n            alert(\"Something went wrong sending the leaderboard, please contact us\")\r\n            props.history.push('/fivecent');\r\n          }\r\n        })\r\n      }\r\n    );\r\n\r\n    const onFullScreen = () => {\r\n        unityContext.setFullscreen(true);\r\n        };\r\n    var balance;\r\n\r\n    const getBalance = async () => {\r\n        balance = sessionStorage.balance;\r\n        setBalance(balance)\r\n    }\r\n    \r\n    const launchGame = async () => {\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n        if (balance <= .05 ){\r\n            alert(\"Your account is inneficient, please deposit additional funds\")\r\n            props.history.push('/fivecent');\r\n        }\r\n        else {\r\n          verifyPayment();\r\n        }\r\n      }\r\n      \r\n      const verifyPayment = async () => {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        if (window.confirm(\"Please confirm 5¢ charge to your account to enter this tournament! You will be charged upon clicking Ok.\") == false)\r\n        {\r\n          props.history.push('/fivecent');\r\n        }\r\n        else {\r\n          alert(\"Do not refresh or navigate to another page until your score has been sent to the leaderboard at the end of the game, good luck!.\")\r\n          var subtractCurrency = {\r\n            Amount: 5,\r\n            VirtualCurrency: \"US\"\r\n          }\r\n          PlayFabClient.SubtractUserVirtualCurrency(subtractCurrency, function (error, result){\r\n            if (result != null) {\r\n              sessionStorage.setItem(\"balance\", (balance - .05).toFixed(2));\r\n              getBalance();\r\n            }\r\n            else {\r\n              alert(\"There was an error charging your account\")\r\n              props.history.push('/fivecent');\r\n            }\r\n          })\r\n        }\r\n      }\r\n\r\n      async function getLeaderboard(){\r\n        await new Promise(resolve => setTimeout(resolve, 1500));\r\n        var leaderboard = {\r\n                StartPosition: 0,\r\n                StatisticName: \"CrazyPongDaily.05\",\r\n                MaxResultsCount: 50\r\n            };\r\n        PlayFabClient.GetLeaderboard(leaderboard, function (error, result)\r\n                {\r\n                    setLeaderboard(result.data.Leaderboard);\r\n                    console.log(leaders)\r\n                });\r\n            }\r\n    \r\n    return (\r\n        <main>\r\n            <header>\r\n                { balance !== null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Balance: ${balance1}</span>\r\n                    </div>\r\n                    )\r\n                }\r\n                { balance === null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Not Logged In</span> <br></br>\r\n                        <span className=\"balance1\">Balance: $0</span>\r\n                    </div>\r\n                    )\r\n                }\r\n            </header>\r\n            {/iPhone|iPad|iPod|Android/i.test(navigator.userAgent) ? (\r\n            <div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h1 className=\"title\">Crazy Pong!</h1>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <div className=\"col-12\">\r\n                <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n            <div id=\"unity-container\" class=\"unity-desktop\">\r\n            <Unity unityContext={unityContext} width=\"100%\" height=\"100%\"/>\r\n                <div id=\"unity-loading-bar\">\r\n                    <div id=\"unity-logo\"></div>\r\n                    <div id=\"unity-progress-bar-empty\">\r\n                    <div id=\"unity-progress-bar-full\"></div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"unity-footer\">\r\n                    <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"controls\">\r\n                <h4><u>Controls</u></h4>\r\n                    <ol>On PC use the left and right arrows to move back and forth to block the ball from hitting the bottom of the screen.</ol>\r\n                    <ol>The mouse can also be used by clicking on either side of the paddle to move in the corresponding direction.</ol>\r\n                    <ol>Attempt to direct the ball to avoid the grenades and collect gems and crates.</ol>\r\n                    <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                    <ol>On mobile touch the screen to the right of the paddle to move to the right and left to move left.</ol>\r\n                <h4><u>Scoring</u></h4>\r\n                    <ol>Crate = 50 points</ol>\r\n                    <ol>Gem = 10 points</ol>\r\n                    <ol>Top-of-Screen = 1 point</ol>\r\n                    <ol>Bottom-of-Screen = -1 life</ol>\r\n                </div>\r\n            </div>\r\n            </div> \r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h2 className=\"title\">Leaderboard</h2>\r\n                    <ol className=\"leaderboardList\">\r\n                        {leaders.map((leaderMapped, index) => (\r\n                            <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                        ))}\r\n                    </ol>\r\n                </div>\r\n              </div>\r\n            </div>)\r\n            :\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <h2 className=\"title\">Leaderboard</h2>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                        <h1 className=\"title\">Crazy Pong!</h1>\r\n                    </div>\r\n                    <div className=\"col-3\"></div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <ol className=\"leaderboardList\">\r\n                            {leaders.map((leaderMapped, index) => (\r\n                                <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                            ))}\r\n                        </ol>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                    <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n                <div id=\"unity-container\" class=\"unity-desktop\">\r\n                <Unity unityContext={unityContext} width=\"960px\" height=\"600px\"/>\r\n                    <div id=\"unity-loading-bar\">\r\n                        <div id=\"unity-logo\"></div>\r\n                        <div id=\"unity-progress-bar-empty\">\r\n                        <div id=\"unity-progress-bar-full\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"unity-footer\">\r\n                        <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                    </div>\r\n                    <br></br>\r\n                    <h4><u>Controls</u></h4>\r\n                    <ol>On PC use the left and right arrows to move back and forth to block the ball from hitting the bottom of the screen.</ol>\r\n                    <ol>The mouse can also be used by clicking on either side of the paddle to move in the corresponding direction.</ol>\r\n                    <ol>Attempt to direct the ball to avoid the grenades and collect gems and crates.</ol>\r\n                    <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                    <ol>On mobile touch the screen to the right of the paddle to move to the right and left to move left.</ol>\r\n                  <h4><u>Scoring</u></h4>\r\n                    <ol>Crate = 50 points</ol>\r\n                    <ol>Gem = 10 points</ol>\r\n                    <ol>Top-of-Screen = 1 point</ol>\r\n                    <ol>Bottom-of-Screen = -1 life</ol>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                <div className=\"col-3\"></div>\r\n                </div>\r\n              }\r\n        </main>\r\n    ) ;\r\n}","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\CrazyPongComponents\\CrazyPong1.js",["221","222","223"],"import React, { useState, useEffect} from \"react\";\r\nimport '../../utils/TemplateData/style.css'\r\nimport Unity, { UnityContext } from \"react-unity-webgl\";\r\nimport {PlayFabClient} from 'playfab-sdk';\r\n\r\nlet unityContext = new UnityContext({\r\n  codeUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.wasm.unityweb\",\r\n  loaderUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.loader.js\",\r\n  frameworkUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.framework.js.unityweb\",\r\n  dataUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.data.unityweb\",\r\n});\r\n\r\nexport default function CrazyPong1(props) {\r\n  const [progression, setProgression] = useState(0);\r\n  const [leaders, setLeaderboard] = useState([]);\r\n  const [balance1, setBalance] = useState('');\r\n\r\n  useEffect(()=>{\r\n    getBalance();\r\n    getLeaderboard();\r\n    launchGame();\r\n    }, [])\r\n\r\n  unityContext.on(\"progress\", progressionVal => {\r\n    setProgression(progressionVal * 100);\r\n    console.log(progression);\r\n    });\r\n  unityContext.on('loaded', () => {\r\n    console.log('Done Loading!');\r\n  });\r\n  unityContext.on('receiveMessageFromUnity',  async function receiveMessageFromUnity(txt) {\r\n    // Get element to assign the message\r\n    const finalScore = txt;\r\n    console.log(\"final\" + \" \" + finalScore)\r\n  \r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    var statisticsUpdate = \r\n      {\r\n          PlayFabId: \"1DF75\",\r\n          Statistics:[\r\n          {\r\n            StatisticName: \"CrazyPongDaily1\",\r\n            Value: finalScore\r\n          }\r\n        ]\r\n      }\r\n      PlayFabClient.UpdatePlayerStatistics(statisticsUpdate, function (error, result)\r\n      {\r\n        if (result != null){\r\n          alert(\"Your Final Score is: \" + finalScore + \"!\")\r\n          alert(\"Play again to improve your score or play another game! Scores will be reset on Sunday night after 12 PM EST.\")\r\n          props.history.push('/onedollar');\r\n          console.log(\"Leaderboard Updated!\")}\r\n          else if (result == null) {\r\n            alert(\"Something went wrong sending the leaderboard, please contact us\")\r\n            props.history.push('/onedollar');\r\n          }\r\n        })\r\n      }\r\n    );\r\n\r\n  const onFullScreen = () => {\r\n    unityContext.setFullscreen(true);\r\n    };\r\n    var balance;\r\n\r\n    const getBalance = async () => {\r\n        balance = sessionStorage.balance;\r\n        setBalance(balance)\r\n    }\r\n    \r\n    const launchGame = async () => {\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n        if (balance <= 1 ){\r\n            alert(\"Your account is inneficient, please deposit additional funds\")\r\n            props.history.push('/onedollar');\r\n        }\r\n        else {\r\n          verifyPayment();\r\n        }\r\n      }\r\n      \r\n      const verifyPayment = async () => {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        if (window.confirm(\"Please confirm $1 charge to your account to enter this tournament! You will be charged upon clicking Ok.\") == false)\r\n        {\r\n          props.history.push('/onedollar');\r\n        }\r\n        else {\r\n          alert(\"Do not refresh or navigate to another page until your score has been sent to the leaderboard at the end of the game, good luck!.\")\r\n          var subtractCurrency = {\r\n            Amount: 100,\r\n            VirtualCurrency: \"US\"\r\n          }\r\n          PlayFabClient.SubtractUserVirtualCurrency(subtractCurrency, function (error, result){\r\n            if (result != null) {\r\n              sessionStorage.setItem(\"balance\", (balance - 1).toFixed(2));\r\n              getBalance();\r\n            }\r\n            else {\r\n              alert(\"There was an error charging your account\")\r\n              props.history.push('/onedollar');\r\n            }\r\n          })\r\n        }\r\n      }\r\n\r\n    async function getLeaderboard(){\r\n        await new Promise(resolve => setTimeout(resolve, 1500));\r\n        var leaderboard = {\r\n                StartPosition: 0,\r\n                StatisticName: \"CrazyPongDaily1\",\r\n                MaxResultsCount: 50\r\n            };\r\n        PlayFabClient.GetLeaderboard(leaderboard, function (error, result)\r\n                {\r\n                    setLeaderboard(result.data.Leaderboard);\r\n                    console.log(leaders)\r\n                });\r\n            }\r\n    \r\n    return (\r\n            <main>\r\n                <header>\r\n                { balance !== null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Balance: ${balance1}</span>\r\n                    </div>\r\n                    )\r\n                }\r\n                { balance === null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Not Logged In</span> <br></br>\r\n                        <span className=\"balance1\">Balance: $0</span>\r\n                    </div>\r\n                    )\r\n                }\r\n            </header>\r\n\r\n            {/iPhone|iPad|iPod|Android/i.test(navigator.userAgent) ? (\r\n            <div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h1 className=\"title\">Crazy Pong!</h1>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <div className=\"col-12\">\r\n                <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n            <div id=\"unity-container\" class=\"unity-desktop\">\r\n            <Unity unityContext={unityContext} width=\"100%\" height=\"100%\"/>\r\n                <div id=\"unity-loading-bar\">\r\n                    <div id=\"unity-logo\"></div>\r\n                    <div id=\"unity-progress-bar-empty\">\r\n                    <div id=\"unity-progress-bar-full\"></div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"unity-footer\">\r\n                    <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"controls\">\r\n                <h4><u>Controls</u></h4>\r\n                    <ol>On PC use the left and right arrows to move back and forth to block the ball from hitting the bottom of the screen.</ol>\r\n                    <ol>The mouse can also be used by clicking on either side of the paddle to move in the corresponding direction.</ol>\r\n                    <ol>Attempt to direct the ball to avoid the grenades and collect gems and crates.</ol>\r\n                    <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                    <ol>On mobile touch the screen to the right of the paddle to move to the right and left to move left.</ol>\r\n                <h4><u>Scoring</u></h4>\r\n                    <ol>Crate = 50 points</ol>\r\n                    <ol>Gem = 10 points</ol>\r\n                    <ol>Top-of-Screen = 1 point</ol>\r\n                    <ol>Bottom-of-Screen = -1 life</ol>\r\n                </div>\r\n            </div>\r\n            </div> \r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h2 className=\"title\">Leaderboard</h2>\r\n                    <ol className=\"leaderboardList\">\r\n                        {leaders.map((leaderMapped, index) => (\r\n                            <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                        ))}\r\n                    </ol>\r\n                </div>\r\n              </div>\r\n            </div>)\r\n            :\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <h2 className=\"title\">Leaderboard</h2>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                        <h1 className=\"title\">Crazy Pong!</h1>\r\n                    </div>\r\n                    <div className=\"col-3\"></div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <ol className=\"leaderboardList\">\r\n                            {leaders.map((leaderMapped, index) => (\r\n                                <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                            ))}\r\n                        </ol>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                    <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n                <div id=\"unity-container\" class=\"unity-desktop\">\r\n                <Unity unityContext={unityContext} width=\"960px\" height=\"600px\"/>\r\n                    <div id=\"unity-loading-bar\">\r\n                        <div id=\"unity-logo\"></div>\r\n                        <div id=\"unity-progress-bar-empty\">\r\n                        <div id=\"unity-progress-bar-full\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"unity-footer\">\r\n                        <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                    </div>\r\n                    <br></br>\r\n                    <h4><u>Controls</u></h4>\r\n                    <ol>On PC use the left and right arrows to move back and forth to block the ball from hitting the bottom of the screen.</ol>\r\n                    <ol>The mouse can also be used by clicking on either side of the paddle to move in the corresponding direction.</ol>\r\n                    <ol>Attempt to direct the ball to avoid the grenades and collect gems and crates.</ol>\r\n                    <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                    <ol>On mobile touch the screen to the right of the paddle to move to the right and left to move left.</ol>\r\n                  <h4><u>Scoring</u></h4>\r\n                    <ol>Crate = 50 points</ol>\r\n                    <ol>Gem = 10 points</ol>\r\n                    <ol>Top-of-Screen = 1 point</ol>\r\n                    <ol>Bottom-of-Screen = -1 life</ol>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                <div className=\"col-3\"></div>\r\n                </div>\r\n              }\r\n            </main>\r\n        ) ;\r\n    }","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\CrazyPongComponents\\CrazyPong5.js",["224","225","226"],"import React, { useState, useEffect} from \"react\";\r\nimport '../../utils/TemplateData/style.css'\r\nimport Unity, { UnityContext } from \"react-unity-webgl\";\r\nimport {PlayFabClient} from 'playfab-sdk';\r\n\r\nlet unityContext = new UnityContext({\r\n  codeUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.wasm.unityweb\",\r\n  loaderUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.loader.js\",\r\n  frameworkUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.framework.js.unityweb\",\r\n  dataUrl: \"/games/CrazyPong/Build/Crazy_Pong Web.data.unityweb\",\r\n});\r\n\r\nexport default function CrazyPong5(props) {\r\n  const [progression, setProgression] = useState(0);\r\n  const [leaders, setLeaderboard] = useState([]);\r\n  const [balance1, setBalance] = useState('');\r\n  useEffect(()=>{\r\n    getBalance();\r\n    getLeaderboard()\r\n    launchGame();\r\n    }, [])\r\n\r\n  unityContext.on(\"progress\", progressionVal => {\r\n    setProgression(progressionVal * 100);\r\n    console.log(progression);\r\n    });\r\n  unityContext.on('loaded', () => {\r\n    console.log('Done Loading!');\r\n  });\r\n  unityContext.on('receiveMessageFromUnity',  async function receiveMessageFromUnity(txt) {\r\n    // Get element to assign the message\r\n    const finalScore = txt;\r\n    console.log(\"final\" + \" \" + finalScore)\r\n  \r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    var statisticsUpdate = \r\n      {\r\n          PlayFabId: \"1DF75\",\r\n          Statistics:[\r\n          {\r\n            StatisticName: \"CrazyPongDaily5\",\r\n            Value: finalScore\r\n          }\r\n        ]\r\n      }\r\n      PlayFabClient.UpdatePlayerStatistics(statisticsUpdate, function (error, result)\r\n      {\r\n        if (result != null){\r\n          alert(\"Your Final Score is: \" + finalScore + \"!\")\r\n          alert(\"Play again to improve your score or play another game! Scores will be reset on Sunday night after 12 PM EST.\")\r\n          props.history.push('/fivedollar');\r\n          console.log(\"Leaderboard Updated!\")}\r\n          else if (result == null) {\r\n            alert(\"Something went wrong sending the leaderboard, please contact us\")\r\n            props.history.push('/fivedollar');\r\n          }\r\n        })\r\n      }\r\n    );\r\n\r\n  const onFullScreen = () => {\r\n    unityContext.setFullscreen(true);\r\n    };\r\n    var balance;\r\n\r\n    const getBalance = async () => {\r\n        balance = sessionStorage.balance;\r\n        setBalance(balance)\r\n    }\r\n    \r\n    const launchGame = async () => {\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n        if (balance <= 5 ){\r\n            alert(\"Your account is inneficient, please deposit additional funds\")\r\n            props.history.push('/fivedollar');\r\n        }\r\n        else {\r\n          verifyPayment();\r\n        }\r\n      }\r\n      \r\n      const verifyPayment = async () => {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        if (window.confirm(\"Please confirm $5 charge to your account to enter this tournament! You will be charged upon clicking Ok.\") == false)\r\n        {\r\n          props.history.push('/fivedollar');\r\n        }\r\n        else {\r\n          alert(\"Do not refresh or navigate to another page until your score has been sent to the leaderboard at the end of the game, good luck!.\")\r\n          var subtractCurrency = {\r\n            Amount: 500,\r\n            VirtualCurrency: \"US\"\r\n          }\r\n          PlayFabClient.SubtractUserVirtualCurrency(subtractCurrency, function (error, result){\r\n            if (result != null) {\r\n              sessionStorage.setItem(\"balance\", (balance - 5).toFixed(2));\r\n              getBalance();\r\n            }\r\n            else {\r\n              alert(\"There was an error charging your account\")\r\n              props.history.push('/fivedollar');\r\n            }\r\n          })\r\n        }\r\n      }\r\n\r\n      async function getLeaderboard(){\r\n        await new Promise(resolve => setTimeout(resolve, 1500));\r\n        var leaderboard = {\r\n                StartPosition: 0,\r\n                StatisticName: \"CrazyPongDaily5\",\r\n                MaxResultsCount: 50\r\n            };\r\n        PlayFabClient.GetLeaderboard(leaderboard, function (error, result)\r\n                {\r\n                    setLeaderboard(result.data.Leaderboard);\r\n                    console.log(leaders)\r\n                });\r\n            }\r\n    \r\n    return (\r\n        <main>\r\n            <header>\r\n                { balance !== null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Balance: ${balance1}</span>\r\n                    </div>\r\n                    )\r\n                }\r\n                { balance === null && (\r\n                    <div className=\"balance\">\r\n                        <span className=\"balance1\">Not Logged In</span> <br></br>\r\n                        <span className=\"balance1\">Balance: $0</span>\r\n                    </div>\r\n                    )\r\n                }\r\n            </header>\r\n            {/iPhone|iPad|iPod|Android/i.test(navigator.userAgent) ? (\r\n            <div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h1 className=\"title\">Crazy Pong!</h1>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <div className=\"col-12\">\r\n                <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n            <div id=\"unity-container\" class=\"unity-desktop\">\r\n            <Unity unityContext={unityContext} width=\"100%\" height=\"100%\"/>\r\n                <div id=\"unity-loading-bar\">\r\n                    <div id=\"unity-logo\"></div>\r\n                    <div id=\"unity-progress-bar-empty\">\r\n                    <div id=\"unity-progress-bar-full\"></div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"unity-footer\">\r\n                    <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"controls\">\r\n                <h4><u>Controls</u></h4>\r\n                    <ol>On PC use the left and right arrows to move back and forth to block the ball from hitting the bottom of the screen.</ol>\r\n                    <ol>The mouse can also be used by clicking on either side of the paddle to move in the corresponding direction.</ol>\r\n                    <ol>Attempt to direct the ball to avoid the grenades and collect gems and crates.</ol>\r\n                    <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                    <ol>On mobile touch the screen to the right of the paddle to move to the right and left to move left.</ol>\r\n                <h4><u>Scoring</u></h4>\r\n                    <ol>Crate = 50 points</ol>\r\n                    <ol>Gem = 10 points</ol>\r\n                    <ol>Top-of-Screen = 1 point</ol>\r\n                    <ol>Bottom-of-Screen = -1 life</ol>\r\n                </div>\r\n            </div>\r\n            </div> \r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <h2 className=\"title\">Leaderboard</h2>\r\n                    <ol className=\"leaderboardList\">\r\n                        {leaders.map((leaderMapped, index) => (\r\n                            <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                        ))}\r\n                    </ol>\r\n                </div>\r\n              </div>\r\n            </div>)\r\n            :\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <h2 className=\"title\">Leaderboard</h2>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                        <h1 className=\"title\">Crazy Pong!</h1>\r\n                    </div>\r\n                    <div className=\"col-3\"></div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <ol className=\"leaderboardList\">\r\n                            {leaders.map((leaderMapped, index) => (\r\n                                <li key={`${leaderMapped.DisplayName}_${leaderMapped.StatValue}`} className=\"leaderboardItem\">{leaderMapped.DisplayName}: {leaderMapped.StatValue}</li>\r\n                            ))}\r\n                        </ol>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                    <div id=\"not-available\"><h4>This game is not available on this screen size</h4></div>\r\n                <div id=\"unity-container\" class=\"unity-desktop\">\r\n                <Unity unityContext={unityContext} width=\"960px\" height=\"600px\"/>\r\n                    <div id=\"unity-loading-bar\">\r\n                        <div id=\"unity-logo\"></div>\r\n                        <div id=\"unity-progress-bar-empty\">\r\n                        <div id=\"unity-progress-bar-full\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"unity-footer\">\r\n                        <button id=\"unity-fullscreen-button\" onClick={onFullScreen}></button>\r\n                    </div>\r\n                    <br></br>\r\n                    <h4><u>Controls</u></h4>\r\n                    <ol>On PC use the left and right arrows to move back and forth to block the ball from hitting the bottom of the screen.</ol>\r\n                    <ol>The mouse can also be used by clicking on either side of the paddle to move in the corresponding direction.</ol>\r\n                    <ol>Attempt to direct the ball to avoid the grenades and collect gems and crates.</ol>\r\n                    <span style={{ color: 'red' }}>Warning: This game works best on PC</span>\r\n                    <ol>On mobile touch the screen to the right of the paddle to move to the right and left to move left.</ol>\r\n                  <h4><u>Scoring</u></h4>\r\n                    <ol>Crate = 50 points</ol>\r\n                    <ol>Gem = 10 points</ol>\r\n                    <ol>Top-of-Screen = 1 point</ol>\r\n                    <ol>Bottom-of-Screen = -1 life</ol>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                <div className=\"col-3\"></div>\r\n                </div>\r\n              }\r\n        </main>\r\n    ) ;\r\n}","C:\\Users\\markl\\Documents\\litgamers\\litgamers\\litgamers\\src\\components\\Recovery.js",[],{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","replacedBy":"230"},{"ruleId":"231","severity":1,"message":"232","line":49,"column":79,"nodeType":"233","endLine":49,"endColumn":94},{"ruleId":"234","severity":1,"message":"235","line":3,"column":9,"nodeType":"236","messageId":"237","endLine":3,"endColumn":22},{"ruleId":"227","replacedBy":"238"},{"ruleId":"229","replacedBy":"239"},{"ruleId":"234","severity":1,"message":"240","line":2,"column":10,"nodeType":"236","messageId":"237","endLine":2,"endColumn":17},{"ruleId":"234","severity":1,"message":"241","line":178,"column":9,"nodeType":"236","messageId":"237","endLine":178,"endColumn":20},{"ruleId":"242","severity":1,"message":"243","line":21,"column":8,"nodeType":"244","endLine":21,"endColumn":10,"suggestions":"245"},{"ruleId":"246","severity":1,"message":"247","line":33,"column":25,"nodeType":"248","messageId":"249","endLine":33,"endColumn":26},{"ruleId":"250","severity":1,"message":"251","line":84,"column":136,"nodeType":"248","messageId":"252","endLine":84,"endColumn":138},{"ruleId":"242","severity":1,"message":"243","line":21,"column":8,"nodeType":"244","endLine":21,"endColumn":10,"suggestions":"253"},{"ruleId":"246","severity":1,"message":"247","line":33,"column":25,"nodeType":"248","messageId":"249","endLine":33,"endColumn":26},{"ruleId":"250","severity":1,"message":"251","line":91,"column":136,"nodeType":"248","messageId":"252","endLine":91,"endColumn":138},{"ruleId":"242","severity":1,"message":"243","line":21,"column":8,"nodeType":"244","endLine":21,"endColumn":10,"suggestions":"254"},{"ruleId":"246","severity":1,"message":"247","line":33,"column":25,"nodeType":"248","messageId":"249","endLine":33,"endColumn":26},{"ruleId":"250","severity":1,"message":"251","line":84,"column":137,"nodeType":"248","messageId":"252","endLine":84,"endColumn":139},{"ruleId":"242","severity":1,"message":"243","line":22,"column":8,"nodeType":"244","endLine":22,"endColumn":10,"suggestions":"255"},{"ruleId":"246","severity":1,"message":"247","line":34,"column":25,"nodeType":"248","messageId":"249","endLine":34,"endColumn":26},{"ruleId":"250","severity":1,"message":"251","line":85,"column":136,"nodeType":"248","messageId":"252","endLine":85,"endColumn":138},{"ruleId":"242","severity":1,"message":"243","line":21,"column":8,"nodeType":"244","endLine":21,"endColumn":10,"suggestions":"256"},{"ruleId":"246","severity":1,"message":"247","line":33,"column":25,"nodeType":"248","messageId":"249","endLine":33,"endColumn":26},{"ruleId":"250","severity":1,"message":"251","line":84,"column":136,"nodeType":"248","messageId":"252","endLine":84,"endColumn":138},{"ruleId":"246","severity":1,"message":"247","line":41,"column":29,"nodeType":"248","messageId":"249","endLine":41,"endColumn":30},{"ruleId":"227","replacedBy":"257"},{"ruleId":"229","replacedBy":"258"},{"ruleId":"242","severity":1,"message":"243","line":21,"column":8,"nodeType":"244","endLine":21,"endColumn":10,"suggestions":"259"},{"ruleId":"246","severity":1,"message":"247","line":33,"column":25,"nodeType":"248","messageId":"249","endLine":33,"endColumn":26},{"ruleId":"250","severity":1,"message":"251","line":84,"column":136,"nodeType":"248","messageId":"252","endLine":84,"endColumn":138},{"ruleId":"246","severity":1,"message":"247","line":41,"column":29,"nodeType":"248","messageId":"249","endLine":41,"endColumn":30},{"ruleId":"242","severity":1,"message":"243","line":21,"column":8,"nodeType":"244","endLine":21,"endColumn":10,"suggestions":"260"},{"ruleId":"246","severity":1,"message":"247","line":33,"column":25,"nodeType":"248","messageId":"249","endLine":33,"endColumn":26},{"ruleId":"250","severity":1,"message":"251","line":84,"column":137,"nodeType":"248","messageId":"252","endLine":84,"endColumn":139},{"ruleId":"242","severity":1,"message":"243","line":21,"column":8,"nodeType":"244","endLine":21,"endColumn":10,"suggestions":"261"},{"ruleId":"246","severity":1,"message":"247","line":33,"column":25,"nodeType":"248","messageId":"249","endLine":33,"endColumn":26},{"ruleId":"250","severity":1,"message":"251","line":84,"column":136,"nodeType":"248","messageId":"252","endLine":84,"endColumn":138},{"ruleId":"242","severity":1,"message":"243","line":22,"column":8,"nodeType":"244","endLine":22,"endColumn":10,"suggestions":"262"},{"ruleId":"246","severity":1,"message":"247","line":34,"column":25,"nodeType":"248","messageId":"249","endLine":34,"endColumn":26},{"ruleId":"250","severity":1,"message":"251","line":85,"column":136,"nodeType":"248","messageId":"252","endLine":85,"endColumn":138},{"ruleId":"242","severity":1,"message":"243","line":21,"column":8,"nodeType":"244","endLine":21,"endColumn":10,"suggestions":"263"},{"ruleId":"246","severity":1,"message":"247","line":33,"column":25,"nodeType":"248","messageId":"249","endLine":33,"endColumn":26},{"ruleId":"250","severity":1,"message":"251","line":84,"column":136,"nodeType":"248","messageId":"252","endLine":84,"endColumn":138},"no-native-reassign",["264"],"no-negated-in-lhs",["265"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-unused-vars","'PlayFabClient' is defined but never used.","Identifier","unusedVar",["264"],["265"],"'getUser' is defined but never used.","'addCurrency' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getBalance', 'getLeaderboard', and 'launchGame'. Either include them or remove the dependency array.","ArrayExpression",["266"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","eqeqeq","Expected '===' and instead saw '=='.","unexpected",["267"],["268"],["269"],["270"],["264"],["265"],["271"],["272"],["273"],["274"],["275"],"no-global-assign","no-unsafe-negation",{"desc":"276","fix":"277"},{"desc":"276","fix":"278"},{"desc":"276","fix":"279"},{"desc":"276","fix":"280"},{"desc":"276","fix":"281"},{"desc":"276","fix":"282"},{"desc":"276","fix":"283"},{"desc":"276","fix":"284"},{"desc":"276","fix":"285"},{"desc":"276","fix":"286"},"Update the dependencies array to be: [getBalance, getLeaderboard, launchGame]",{"range":"287","text":"288"},{"range":"289","text":"288"},{"range":"290","text":"288"},{"range":"291","text":"288"},{"range":"292","text":"288"},{"range":"293","text":"288"},{"range":"294","text":"288"},{"range":"295","text":"288"},{"range":"296","text":"288"},{"range":"297","text":"288"},[818,820],"[getBalance, getLeaderboard, launchGame]",[817,819],[838,840],[820,822],[818,820],[811,813],[831,833],[811,813],[813,815],[810,812]]